// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: openapi.proto

/*
	Package openapi is a generated protocol buffer package.

	It is generated from these files:
		openapi.proto

	It has these top-level messages:
		ProjectInfo
		TagItem
		BudgetInfo
		BudgetReviseItem
		EmployeeInfo
		IdInfo
		DepartmentInfo
		ReportCountItem
		ReportDetailItem
		RequestHeader
		PageRequest
		TokenRequest
		ProjectUpdateRequest
		ListProjectRequest
		BudgetUpdateRequest
		BudgetReviseRequest
		ListBudgetRequest
		EmployeeUpdateRequest
		ListEmployeeRequest
		DepartmentUpdateRequest
		ListDepartmentRequest
		FlushBeginRequest
		FlushEndRequest
		ReportCountRequest
		ReportDetailRequest
		ResponseHeader
		PageResponse
		TokenResponse
		ProjectUpdateResponse
		ListProjectResponse
		BudgetUpdateResponse
		BudgetReviseResponse
		ListBudgetResponse
		EmployeeUpdateResponse
		ListEmployeeResponse
		DepartmentUpdateResponse
		ListDepartmentResponse
		FlushBeginResponse
		FlushEndResponse
		ReportCountResponse
		ReportDetailResponse
*/
package openapi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 通信状态枚举.
type Status int32

const (
	// 状态为空.
	Status_STATUS_EMPTY Status = 0
	// 成功.
	Status_STATUS_SUCCESS Status = 1
	// 失败：业务导致.
	Status_STATUS_FAIL Status = 2
	// 出错：服务异常.
	Status_STATUS_ERROR Status = 3
	// 未授权：需要token令牌或者令牌已过期.
	Status_STATUS_UNAUTHORIZED Status = 4
	// 已停止服务，或服务未启用.
	Status_STATUS_NOT_IN_SERVICE Status = 5
)

var Status_name = map[int32]string{
	0: "STATUS_EMPTY",
	1: "STATUS_SUCCESS",
	2: "STATUS_FAIL",
	3: "STATUS_ERROR",
	4: "STATUS_UNAUTHORIZED",
	5: "STATUS_NOT_IN_SERVICE",
}
var Status_value = map[string]int32{
	"STATUS_EMPTY":          0,
	"STATUS_SUCCESS":        1,
	"STATUS_FAIL":           2,
	"STATUS_ERROR":          3,
	"STATUS_UNAUTHORIZED":   4,
	"STATUS_NOT_IN_SERVICE": 5,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}
func (Status) EnumDescriptor() ([]byte, []int) { return fileDescriptorOpenapi, []int{0} }

// 通用操作结果.
type ActResult int32

const (
	// 操作结果为空.
	ActResult_ACT_RESULT_EMPTY ActResult = 0
	// 操作成功.
	ActResult_ACT_RESULT_SUCCESS ActResult = 1
	// 失败，如余额不足.
	ActResult_ACT_RESULT_FAIL ActResult = 2
	// 异常,详见文本消息.
	ActResult_ACT_RESULT_ERROR ActResult = 3
	// 异常,已存在，如任务、数据已存在.
	ActResult_ACT_RESULT_EXISTS ActResult = 4
)

var ActResult_name = map[int32]string{
	0: "ACT_RESULT_EMPTY",
	1: "ACT_RESULT_SUCCESS",
	2: "ACT_RESULT_FAIL",
	3: "ACT_RESULT_ERROR",
	4: "ACT_RESULT_EXISTS",
}
var ActResult_value = map[string]int32{
	"ACT_RESULT_EMPTY":   0,
	"ACT_RESULT_SUCCESS": 1,
	"ACT_RESULT_FAIL":    2,
	"ACT_RESULT_ERROR":   3,
	"ACT_RESULT_EXISTS":  4,
}

func (x ActResult) String() string {
	return proto.EnumName(ActResult_name, int32(x))
}
func (ActResult) EnumDescriptor() ([]byte, []int) { return fileDescriptorOpenapi, []int{1} }

// 预算归属类型:项目、部门.
type BudgetType int32

const (
	// 类型为空.
	BudgetType_BUDGET_TYPE_EMPTY BudgetType = 0
	// 项目预算.
	BudgetType_BUDGET_TYPE_PRJ BudgetType = 1
	// 部门预算.
	BudgetType_BUDGET_TYPE_DEP BudgetType = 2
)

var BudgetType_name = map[int32]string{
	0: "BUDGET_TYPE_EMPTY",
	1: "BUDGET_TYPE_PRJ",
	2: "BUDGET_TYPE_DEP",
}
var BudgetType_value = map[string]int32{
	"BUDGET_TYPE_EMPTY": 0,
	"BUDGET_TYPE_PRJ":   1,
	"BUDGET_TYPE_DEP":   2,
}

func (x BudgetType) String() string {
	return proto.EnumName(BudgetType_name, int32(x))
}
func (BudgetType) EnumDescriptor() ([]byte, []int) { return fileDescriptorOpenapi, []int{2} }

// 员工状态.
type EmpStatus int32

const (
	// 空.
	EmpStatus_EMP_STATUS_EMPTY EmpStatus = 0
	// 正常.
	EmpStatus_EMP_STATUS_NORM EmpStatus = 1
	// 离职.
	EmpStatus_EMP_STATUS_LOFF EmpStatus = 2
)

var EmpStatus_name = map[int32]string{
	0: "EMP_STATUS_EMPTY",
	1: "EMP_STATUS_NORM",
	2: "EMP_STATUS_LOFF",
}

var EmpStatus_value = map[string]int32{
	"EMP_STATUS_EMPTY": 0,
	"EMP_STATUS_NORM":  1,
	"EMP_STATUS_LOFF":  2,
}

func (x EmpStatus) String() string {
	return proto.EnumName(EmpStatus_name, int32(x))
}
func (EmpStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptorOpenapi, []int{3} }

// 项目状态.
type PrjStatus int32

const (
	// 空.
	PrjStatus_PRJ_STATUS_EMPTY PrjStatus = 0
	// 正常.
	PrjStatus_PRJ_STATUS_NORM PrjStatus = 1
	// 停用.
	PrjStatus_PRJ_STATUS_STOP PrjStatus = 2
)

var PrjStatus_name = map[int32]string{
	0: "PRJ_STATUS_EMPTY",
	1: "PRJ_STATUS_NORM",
	2: "PRJ_STATUS_STOP",
}
var PrjStatus_value = map[string]int32{
	"PRJ_STATUS_EMPTY": 0,
	"PRJ_STATUS_NORM":  1,
	"PRJ_STATUS_STOP":  2,
}

func (x PrjStatus) String() string {
	return proto.EnumName(PrjStatus_name, int32(x))
}
func (PrjStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptorOpenapi, []int{4} }

// 性别.
type Gender int32

const (
	// 空.
	Gender_GENDER_EMPTY Gender = 0
	// 女性.
	Gender_GENDER_FEMALE Gender = 1
	// 男性.
	Gender_GENDER_MALE Gender = 2
)

var Gender_name = map[int32]string{
	0: "GENDER_EMPTY",
	1: "GENDER_FEMALE",
	2: "GENDER_MALE",
}
var Gender_value = map[string]int32{
	"GENDER_EMPTY":  0,
	"GENDER_FEMALE": 1,
	"GENDER_MALE":   2,
}

func (x Gender) String() string {
	return proto.EnumName(Gender_name, int32(x))
}
func (Gender) EnumDescriptor() ([]byte, []int) { return fileDescriptorOpenapi, []int{5} }

// 证件类型.
type IdType int32

const (
	// 空.
	IdType_ID_TYPE_EMPTY IdType = 0
	// 身份证.
	IdType_ID_TYPE_IDCARD IdType = 1
	// 护照.
	IdType_ID_TYPE_PASSPORT IdType = 2
	// 港澳通行证，Hong Kong and Macao pass.
	IdType_ID_TYPE_HMPASS IdType = 3
)

var IdType_name = map[int32]string{
	0: "ID_TYPE_EMPTY",
	1: "ID_TYPE_IDCARD",
	2: "ID_TYPE_PASSPORT",
	3: "ID_TYPE_HMPASS",
}
var IdType_value = map[string]int32{
	"ID_TYPE_EMPTY":    0,
	"ID_TYPE_IDCARD":   1,
	"ID_TYPE_PASSPORT": 2,
	"ID_TYPE_HMPASS":   3,
}

func (x IdType) String() string {
	return proto.EnumName(IdType_name, int32(x))
}
func (IdType) EnumDescriptor() ([]byte, []int) { return fileDescriptorOpenapi, []int{6} }

// 部门状态.
type DepStatus int32

const (
	// 空.
	DepStatus_DEP_STATUS_EMPTY DepStatus = 0
	// 正常.
	DepStatus_DEP_STATUS_NORM DepStatus = 1
	// 停用.
	DepStatus_DEP_STATUS_STOP DepStatus = 2
)

var DepStatus_name = map[int32]string{
	0: "DEP_STATUS_EMPTY",
	1: "DEP_STATUS_NORM",
	2: "DEP_STATUS_STOP",
}
var DepStatus_value = map[string]int32{
	"DEP_STATUS_EMPTY": 0,
	"DEP_STATUS_NORM":  1,
	"DEP_STATUS_STOP":  2,
}

func (x DepStatus) String() string {
	return proto.EnumName(DepStatus_name, int32(x))
}
func (DepStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptorOpenapi, []int{7} }

// 分类标签，企业客户传入，标签打到订单上,用于报表统计.
type ExtraTag int32

const (
	// 空.
	ExtraTag_EXTRATAG_EMPTY ExtraTag = 0
	// 项目所属子公司ID.
	ExtraTag_PRJ_ENTER_ID ExtraTag = 1
	// 外部项目ID.
	ExtraTag_PRJ_ID ExtraTag = 2
	// 外部BRANCH.
	ExtraTag_U_BRANCH ExtraTag = 3
	// 外部BU.
	ExtraTag_U_BU ExtraTag = 4
	// 外部部门COST_CENTER.
	ExtraTag_U_DEPARTMENT_COST ExtraTag = 5
	// 外部下单人部门ID.
	ExtraTag_U_DEPARTMENT_ID ExtraTag = 6
	// 外部子公司ID.
	ExtraTag_U_ENTER_ID ExtraTag = 7
	// 外部用户ID.
	ExtraTag_U_STAFF_ID ExtraTag = 8
	// 外部员工工作地点.
	ExtraTag_U_WORK_LOCATION ExtraTag = 9
)

var ExtraTag_name = map[int32]string{
	0: "EXTRATAG_EMPTY",
	1: "PRJ_ENTER_ID",
	2: "PRJ_ID",
	3: "U_BRANCH",
	4: "U_BU",
	5: "U_DEPARTMENT_COST",
	6: "U_DEPARTMENT_ID",
	7: "U_ENTER_ID",
	8: "U_STAFF_ID",
	9: "U_WORK_LOCATION",
}
var ExtraTag_value = map[string]int32{
	"EXTRATAG_EMPTY":    0,
	"PRJ_ENTER_ID":      1,
	"PRJ_ID":            2,
	"U_BRANCH":          3,
	"U_BU":              4,
	"U_DEPARTMENT_COST": 5,
	"U_DEPARTMENT_ID":   6,
	"U_ENTER_ID":        7,
	"U_STAFF_ID":        8,
	"U_WORK_LOCATION":   9,
}

func (x ExtraTag) String() string {
	return proto.EnumName(ExtraTag_name, int32(x))
}
func (ExtraTag) EnumDescriptor() ([]byte, []int) { return fileDescriptorOpenapi, []int{8} }

// 数据类型.
type DataType int32

const (
	// 空类型.
	DataType_DATA_TYPE_EMPTY DataType = 0
	// 员工.
	DataType_DATA_TYPE_EMP DataType = 1
	// 部门.
	DataType_DATA_TYPE_DEP DataType = 2
	// 项目.
	DataType_DATA_TYPE_PRJ DataType = 3
	// 预算.
	DataType_DATA_TYPE_BUDGET DataType = 4
	// 全部类型.
	DataType_DATA_TYPE_ALL DataType = 5
)

var DataType_name = map[int32]string{
	0: "DATA_TYPE_EMPTY",
	1: "DATA_TYPE_EMP",
	2: "DATA_TYPE_DEP",
	3: "DATA_TYPE_PRJ",
	4: "DATA_TYPE_BUDGET",
	5: "DATA_TYPE_ALL",
}
var DataType_value = map[string]int32{
	"DATA_TYPE_EMPTY":  0,
	"DATA_TYPE_EMP":    1,
	"DATA_TYPE_DEP":    2,
	"DATA_TYPE_PRJ":    3,
	"DATA_TYPE_BUDGET": 4,
	"DATA_TYPE_ALL":    5,
}

func (x DataType) String() string {
	return proto.EnumName(DataType_name, int32(x))
}
func (DataType) EnumDescriptor() ([]byte, []int) { return fileDescriptorOpenapi, []int{9} }

// 数据状态.
type DataStatus int32

const (
	// 空类型.
	DataStatus_DATA_STATUS_EMPTY DataStatus = 0
	// 成功有效.
	DataStatus_DATA_STATUS_OK DataStatus = 1
	// 失败无效.
	DataStatus_DATA_STATUS_FAIL DataStatus = 2
	// 全部.
	DataStatus_DATA_STATUS_ALL DataStatus = 3
)

var DataStatus_name = map[int32]string{
	0: "DATA_STATUS_EMPTY",
	1: "DATA_STATUS_OK",
	2: "DATA_STATUS_FAIL",
	3: "DATA_STATUS_ALL",
}
var DataStatus_value = map[string]int32{
	"DATA_STATUS_EMPTY": 0,
	"DATA_STATUS_OK":    1,
	"DATA_STATUS_FAIL":  2,
	"DATA_STATUS_ALL":   3,
}

func (x DataStatus) String() string {
	return proto.EnumName(DataStatus_name, int32(x))
}
func (DataStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptorOpenapi, []int{10} }

// 数据标签.
type DataTag int32

const (
	// 空类型.
	DataTag_DATA_TAG_EMPTY DataTag = 0
	// 全部标签.
	DataTag_DATA_TAG_ALL DataTag = 1
	// 落库.
	DataTag_DATA_TAG_SAVE DataTag = 2
	// 数据相比已落库数据无变化.
	DataTag_DATA_TAG_NO_CHANGE DataTag = 3
	// 停用.
	DataTag_DATA_TAG_STOP DataTag = 4
	// 数据不完整，依赖的数据不存在,或数据本身不合法.
	DataTag_DATA_TAG_INCOMPLETE DataTag = 5
)

var DataTag_name = map[int32]string{
	0: "DATA_TAG_EMPTY",
	1: "DATA_TAG_ALL",
	2: "DATA_TAG_SAVE",
	3: "DATA_TAG_NO_CHANGE",
	4: "DATA_TAG_STOP",
	5: "DATA_TAG_INCOMPLETE",
}
var DataTag_value = map[string]int32{
	"DATA_TAG_EMPTY":      0,
	"DATA_TAG_ALL":        1,
	"DATA_TAG_SAVE":       2,
	"DATA_TAG_NO_CHANGE":  3,
	"DATA_TAG_STOP":       4,
	"DATA_TAG_INCOMPLETE": 5,
}

func (x DataTag) String() string {
	return proto.EnumName(DataTag_name, int32(x))
}
func (DataTag) EnumDescriptor() ([]byte, []int) { return fileDescriptorOpenapi, []int{11} }

// 项目基本信息：项目ID、项目name.
type ProjectInfo struct {
	// 项目ID，包括项目执行ID.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// 项目显示名（建议可包含所属部门名称）.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// 执行ID的上级项目ID非空，顶级项目上级ID为空.
	ParentId string `protobuf:"bytes,4,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	// 项目负责人ID，无空集合.
	ApproverIds []string `protobuf:"bytes,5,rep,name=approver_ids,json=approverIds" json:"approver_ids,omitempty"`
	// 状态.
	Status PrjStatus `protobuf:"varint,100,opt,name=status,proto3,enum=openapi.PrjStatus" json:"status,omitempty"`
	// 外部标签列表,允许重复.
	Tags []*TagItem `protobuf:"bytes,109,rep,name=tags" json:"tags,omitempty"`
}

func (m *ProjectInfo) Reset()                    { *m = ProjectInfo{} }
func (m *ProjectInfo) String() string            { return proto.CompactTextString(m) }
func (*ProjectInfo) ProtoMessage()               {}
func (*ProjectInfo) Descriptor() ([]byte, []int) { return fileDescriptorOpenapi, []int{0} }

func (m *ProjectInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ProjectInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProjectInfo) GetParentId() string {
	if m != nil {
		return m.ParentId
	}
	return ""
}

func (m *ProjectInfo) GetApproverIds() []string {
	if m != nil {
		return m.ApproverIds
	}
	return nil
}

func (m *ProjectInfo) GetStatus() PrjStatus {
	if m != nil {
		return m.Status
	}
	return PrjStatus_PRJ_STATUS_EMPTY
}

func (m *ProjectInfo) GetTags() []*TagItem {
	if m != nil {
		return m.Tags
	}
	return nil
}

// 标签封装.
type TagItem struct {
	// 标签枚举.
	Tag ExtraTag `protobuf:"varint,1,opt,name=tag,proto3,enum=openapi.ExtraTag" json:"tag,omitempty"`
	// 标签值.
	Val string `protobuf:"bytes,2,opt,name=val,proto3" json:"val,omitempty"`
}

func (m *TagItem) Reset()                    { *m = TagItem{} }
func (m *TagItem) String() string            { return proto.CompactTextString(m) }
func (*TagItem) ProtoMessage()               {}
func (*TagItem) Descriptor() ([]byte, []int) { return fileDescriptorOpenapi, []int{1} }

func (m *TagItem) GetTag() ExtraTag {
	if m != nil {
		return m.Tag
	}
	return ExtraTag_EXTRATAG_EMPTY
}

func (m *TagItem) GetVal() string {
	if m != nil {
		return m.Val
	}
	return ""
}

// 预算信息.
type BudgetInfo struct {
	// 预算ID(外部ID，或者规则组装：pid+execid+itemcode，#分隔).
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 预算名.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 总预算，单位分，避免用浮点.
	Total int64 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	// 可用预算，单位分.
	Available int64 `protobuf:"varint,4,opt,name=available,proto3" json:"available,omitempty"`
	// 负责人ID,ipsos业务无用.
	ApproverId string `protobuf:"bytes,5,opt,name=approver_id,json=approverId,proto3" json:"approver_id,omitempty"`
	// 可用状态：true、false.
	Status bool `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
	// 预算归属类型：项目、部门.
	Tp BudgetType `protobuf:"varint,7,opt,name=tp,proto3,enum=openapi.BudgetType" json:"tp,omitempty"`
	// 扩展非标信息.
	// 项目id或者部门id，取决于tp.
	TpId string `protobuf:"bytes,102,opt,name=tp_id,json=tpId,proto3" json:"tp_id,omitempty"`
	// 部门id.
	DepId string `protobuf:"bytes,103,opt,name=dep_id,json=depId,proto3" json:"dep_id,omitempty"`
	// 执行ID.
	SubprjId string `protobuf:"bytes,104,opt,name=subprj_id,json=subprjId,proto3" json:"subprj_id,omitempty"`
	// ipsos itemcode:02.003 机票、02.004 火车票，02.007 住宿费
	Itemcode string `protobuf:"bytes,105,opt,name=itemcode,proto3" json:"itemcode,omitempty"`
	// 子项目名（execid对应name).
	SubprjName string `protobuf:"bytes,106,opt,name=subprj_name,json=subprjName,proto3" json:"subprj_name,omitempty"`
	// 预算所属分类：如项目预算所属子公司标签.
	Belong string `protobuf:"bytes,107,opt,name=belong,proto3" json:"belong,omitempty"`
	// 部门或项目（一级）名，取决于tp.
	TpName string `protobuf:"bytes,108,opt,name=tp_name,json=tpName,proto3" json:"tp_name,omitempty"`
	// 外部标签列表,允许重复.
	Tags []*TagItem `protobuf:"bytes,109,rep,name=tags" json:"tags,omitempty"`
}

func (m *BudgetInfo) Reset()                    { *m = BudgetInfo{} }
func (m *BudgetInfo) String() string            { return proto.CompactTextString(m) }
func (*BudgetInfo) ProtoMessage()               {}
func (*BudgetInfo) Descriptor() ([]byte, []int) { return fileDescriptorOpenapi, []int{2} }

func (m *BudgetInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BudgetInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BudgetInfo) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *BudgetInfo) GetAvailable() int64 {
	if m != nil {
		return m.Available
	}
	return 0
}

func (m *BudgetInfo) GetApproverId() string {
	if m != nil {
		return m.ApproverId
	}
	return ""
}

func (m *BudgetInfo) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func (m *BudgetInfo) GetTp() BudgetType {
	if m != nil {
		return m.Tp
	}
	return BudgetType_BUDGET_TYPE_EMPTY
}

func (m *BudgetInfo) GetTpId() string {
	if m != nil {
		return m.TpId
	}
	return ""
}

func (m *BudgetInfo) GetDepId() string {
	if m != nil {
		return m.DepId
	}
	return ""
}

func (m *BudgetInfo) GetSubprjId() string {
	if m != nil {
		return m.SubprjId
	}
	return ""
}

func (m *BudgetInfo) GetItemcode() string {
	if m != nil {
		return m.Itemcode
	}
	return ""
}

func (m *BudgetInfo) GetSubprjName() string {
	if m != nil {
		return m.SubprjName
	}
	return ""
}

func (m *BudgetInfo) GetBelong() string {
	if m != nil {
		return m.Belong
	}
	return ""
}

func (m *BudgetInfo) GetTpName() string {
	if m != nil {
		return m.TpName
	}
	return ""
}

func (m *BudgetInfo) GetTags() []*TagItem {
	if m != nil {
		return m.Tags
	}
	return nil
}

// 预算调整封装.
type BudgetReviseItem struct {
	// 预算复合ID：项目ID+执行代码（exec_code)+费用代码（二级科目itemcode）,#分隔.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 预算归宿类型、部门、项目.
	Tp BudgetType `protobuf:"varint,2,opt,name=tp,proto3,enum=openapi.BudgetType" json:"tp,omitempty"`
	// 部门or项目ID，取决tp.
	TpId string `protobuf:"bytes,3,opt,name=tp_id,json=tpId,proto3" json:"tp_id,omitempty"`
	// 子项目id,执行id.
	SubprjId string `protobuf:"bytes,4,opt,name=subprj_id,json=subprjId,proto3" json:"subprj_id,omitempty"`
	// 费用ID.
	ItemCode string `protobuf:"bytes,5,opt,name=item_code,json=itemCode,proto3" json:"item_code,omitempty"`
	// 总额：分.
	Total int64 `protobuf:"varint,6,opt,name=total,proto3" json:"total,omitempty"`
}

func (m *BudgetReviseItem) Reset()                    { *m = BudgetReviseItem{} }
func (m *BudgetReviseItem) String() string            { return proto.CompactTextString(m) }
func (*BudgetReviseItem) ProtoMessage()               {}
func (*BudgetReviseItem) Descriptor() ([]byte, []int) { return fileDescriptorOpenapi, []int{3} }

func (m *BudgetReviseItem) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *BudgetReviseItem) GetTp() BudgetType {
	if m != nil {
		return m.Tp
	}
	return BudgetType_BUDGET_TYPE_EMPTY
}

func (m *BudgetReviseItem) GetTpId() string {
	if m != nil {
		return m.TpId
	}
	return ""
}

func (m *BudgetReviseItem) GetSubprjId() string {
	if m != nil {
		return m.SubprjId
	}
	return ""
}

func (m *BudgetReviseItem) GetItemCode() string {
	if m != nil {
		return m.ItemCode
	}
	return ""
}

func (m *BudgetReviseItem) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

// 员工信息.
type EmployeeInfo struct {
	// 员工id(外部),ipsos:istaffid.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 姓名，中文.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 英文名.
	EnName string `protobuf:"bytes,3,opt,name=en_name,json=enName,proto3" json:"en_name,omitempty"`
	// 国籍.
	Nationality string `protobuf:"bytes,4,opt,name=nationality,proto3" json:"nationality,omitempty"`
	// 部门id.
	DepId string `protobuf:"bytes,5,opt,name=dep_id,json=depId,proto3" json:"dep_id,omitempty"`
	// 证件列表.
	IdInfos []*IdInfo `protobuf:"bytes,6,rep,name=id_infos,json=idInfos" json:"id_infos,omitempty"`
	// 状态.
	Status EmpStatus `protobuf:"varint,8,opt,name=status,proto3,enum=openapi.EmpStatus" json:"status,omitempty"`
	// 审批人员工id，支持多个
	// ipsos目前只支持一级审批人reportto1.
	ApproverIds []string `protobuf:"bytes,9,rep,name=approver_ids,json=approverIds" json:"approver_ids,omitempty"`
	// email.
	Email string `protobuf:"bytes,10,opt,name=email,proto3" json:"email,omitempty"`
	// 密码.
	Passwd string `protobuf:"bytes,11,opt,name=passwd,proto3" json:"passwd,omitempty"`
	// 扩展非标信息.
	// 手机号.
	Mobile string `protobuf:"bytes,100,opt,name=mobile,proto3" json:"mobile,omitempty"`
	// 级别.
	Level int32 `protobuf:"varint,101,opt,name=level,proto3" json:"level,omitempty"`
	// 性别.
	Gender Gender `protobuf:"varint,102,opt,name=gender,proto3,enum=openapi.Gender" json:"gender,omitempty"`
	// 英文姓.
	EnLastname string `protobuf:"bytes,104,opt,name=en_lastname,json=enLastname,proto3" json:"en_lastname,omitempty"`
	// 英文名.
	EnFirstname string `protobuf:"bytes,105,opt,name=en_firstname,json=enFirstname,proto3" json:"en_firstname,omitempty"`
	// 中文姓.
	CnLastname string `protobuf:"bytes,106,opt,name=cn_lastname,json=cnLastname,proto3" json:"cn_lastname,omitempty"`
	// 中文名.
	CnFirstname string `protobuf:"bytes,107,opt,name=cn_firstname,json=cnFirstname,proto3" json:"cn_firstname,omitempty"`
	// 出生日期:yyyyMMdd.
	Birthday string `protobuf:"bytes,108,opt,name=birthday,proto3" json:"birthday,omitempty"`
	// 外部标签列表,允许重复.
	Tags []*TagItem `protobuf:"bytes,109,rep,name=tags" json:"tags,omitempty"`
}

func (m *EmployeeInfo) Reset()                    { *m = EmployeeInfo{} }
func (m *EmployeeInfo) String() string            { return proto.CompactTextString(m) }
func (*EmployeeInfo) ProtoMessage()               {}
func (*EmployeeInfo) Descriptor() ([]byte, []int) { return fileDescriptorOpenapi, []int{4} }

func (m *EmployeeInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *EmployeeInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EmployeeInfo) GetEnName() string {
	if m != nil {
		return m.EnName
	}
	return ""
}

func (m *EmployeeInfo) GetNationality() string {
	if m != nil {
		return m.Nationality
	}
	return ""
}

func (m *EmployeeInfo) GetDepId() string {
	if m != nil {
		return m.DepId
	}
	return ""
}

func (m *EmployeeInfo) GetIdInfos() []*IdInfo {
	if m != nil {
		return m.IdInfos
	}
	return nil
}

func (m *EmployeeInfo) GetStatus() EmpStatus {
	if m != nil {
		return m.Status
	}
	return EmpStatus_EMP_STATUS_EMPTY
}

func (m *EmployeeInfo) GetApproverIds() []string {
	if m != nil {
		return m.ApproverIds
	}
	return nil
}

func (m *EmployeeInfo) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *EmployeeInfo) GetPasswd() string {
	if m != nil {
		return m.Passwd
	}
	return ""
}

func (m *EmployeeInfo) GetMobile() string {
	if m != nil {
		return m.Mobile
	}
	return ""
}

func (m *EmployeeInfo) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *EmployeeInfo) GetGender() Gender {
	if m != nil {
		return m.Gender
	}
	return Gender_GENDER_EMPTY
}

func (m *EmployeeInfo) GetEnLastname() string {
	if m != nil {
		return m.EnLastname
	}
	return ""
}

func (m *EmployeeInfo) GetEnFirstname() string {
	if m != nil {
		return m.EnFirstname
	}
	return ""
}

func (m *EmployeeInfo) GetCnLastname() string {
	if m != nil {
		return m.CnLastname
	}
	return ""
}

func (m *EmployeeInfo) GetCnFirstname() string {
	if m != nil {
		return m.CnFirstname
	}
	return ""
}

func (m *EmployeeInfo) GetBirthday() string {
	if m != nil {
		return m.Birthday
	}
	return ""
}

func (m *EmployeeInfo) GetTags() []*TagItem {
	if m != nil {
		return m.Tags
	}
	return nil
}

// 证件信息封装.
type IdInfo struct {
	// 证件类型.
	IdType IdType `protobuf:"varint,1,opt,name=id_type,json=idType,proto3,enum=openapi.IdType" json:"id_type,omitempty"`
	// 证件号码.
	IdNumber string `protobuf:"bytes,2,opt,name=id_number,json=idNumber,proto3" json:"id_number,omitempty"`
	// 证件有效期:yyyyMMdd.
	Idindate string `protobuf:"bytes,3,opt,name=idindate,proto3" json:"idindate,omitempty"`
	// 证件签发国.
	Idcountry string `protobuf:"bytes,4,opt,name=idcountry,proto3" json:"idcountry,omitempty"`
}

func (m *IdInfo) Reset()                    { *m = IdInfo{} }
func (m *IdInfo) String() string            { return proto.CompactTextString(m) }
func (*IdInfo) ProtoMessage()               {}
func (*IdInfo) Descriptor() ([]byte, []int) { return fileDescriptorOpenapi, []int{5} }

func (m *IdInfo) GetIdType() IdType {
	if m != nil {
		return m.IdType
	}
	return IdType_ID_TYPE_EMPTY
}

func (m *IdInfo) GetIdNumber() string {
	if m != nil {
		return m.IdNumber
	}
	return ""
}

func (m *IdInfo) GetIdindate() string {
	if m != nil {
		return m.Idindate
	}
	return ""
}

func (m *IdInfo) GetIdcountry() string {
	if m != nil {
		return m.Idcountry
	}
	return ""
}

// 部门信息.
type DepartmentInfo struct {
	// 部门id.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// 中文名.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// 英文名.
	EnName string `protobuf:"bytes,4,opt,name=en_name,json=enName,proto3" json:"en_name,omitempty"`
	// 上级部门id,顶级部门上级部门null.
	SuperDepid string `protobuf:"bytes,5,opt,name=super_depid,json=superDepid,proto3" json:"super_depid,omitempty"`
	// 部门审批人id，支持多个.
	ApproverIds []string `protobuf:"bytes,7,rep,name=approver_ids,json=approverIds" json:"approver_ids,omitempty"`
	// 部门状态.
	Status DepStatus `protobuf:"varint,8,opt,name=status,proto3,enum=openapi.DepStatus" json:"status,omitempty"`
	// 外部标签列表,允许重复.
	Tags []*TagItem `protobuf:"bytes,109,rep,name=tags" json:"tags,omitempty"`
}

func (m *DepartmentInfo) Reset()                    { *m = DepartmentInfo{} }
func (m *DepartmentInfo) String() string            { return proto.CompactTextString(m) }
func (*DepartmentInfo) ProtoMessage()               {}
func (*DepartmentInfo) Descriptor() ([]byte, []int) { return fileDescriptorOpenapi, []int{6} }

func (m *DepartmentInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DepartmentInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DepartmentInfo) GetEnName() string {
	if m != nil {
		return m.EnName
	}
	return ""
}

func (m *DepartmentInfo) GetSuperDepid() string {
	if m != nil {
		return m.SuperDepid
	}
	return ""
}

func (m *DepartmentInfo) GetApproverIds() []string {
	if m != nil {
		return m.ApproverIds
	}
	return nil
}

func (m *DepartmentInfo) GetStatus() DepStatus {
	if m != nil {
		return m.Status
	}
	return DepStatus_DEP_STATUS_EMPTY
}

func (m *DepartmentInfo) GetTags() []*TagItem {
	if m != nil {
		return m.Tags
	}
	return nil
}

// 数据推送统计项.
type ReportCountItem struct {
	// 数据状态.
	Status DataStatus `protobuf:"varint,1,opt,name=status,proto3,enum=openapi.DataStatus" json:"status,omitempty"`
	// 标签.
	Tag DataTag `protobuf:"varint,2,opt,name=tag,proto3,enum=openapi.DataTag" json:"tag,omitempty"`
	// 数据类型.
	Type DataType `protobuf:"varint,3,opt,name=type,proto3,enum=openapi.DataType" json:"type,omitempty"`
	// 统计值.
	Count int32 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *ReportCountItem) Reset()                    { *m = ReportCountItem{} }
func (m *ReportCountItem) String() string            { return proto.CompactTextString(m) }
func (*ReportCountItem) ProtoMessage()               {}
func (*ReportCountItem) Descriptor() ([]byte, []int) { return fileDescriptorOpenapi, []int{7} }

func (m *ReportCountItem) GetStatus() DataStatus {
	if m != nil {
		return m.Status
	}
	return DataStatus_DATA_STATUS_EMPTY
}

func (m *ReportCountItem) GetTag() DataTag {
	if m != nil {
		return m.Tag
	}
	return DataTag_DATA_TAG_EMPTY
}

func (m *ReportCountItem) GetType() DataType {
	if m != nil {
		return m.Type
	}
	return DataType_DATA_TYPE_EMPTY
}

func (m *ReportCountItem) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

// 数据推送明细封装.
type ReportDetailItem struct {
	// 数据状态.
	Status DataStatus `protobuf:"varint,1,opt,name=status,proto3,enum=openapi.DataStatus" json:"status,omitempty"`
	// 标签.
	Tag DataTag `protobuf:"varint,2,opt,name=tag,proto3,enum=openapi.DataTag" json:"tag,omitempty"`
	// 数据类型.
	Type DataType `protobuf:"varint,3,opt,name=type,proto3,enum=openapi.DataType" json:"type,omitempty"`
	// 数据的外部ID.
	Ids []string `protobuf:"bytes,4,rep,name=ids" json:"ids,omitempty"`
}

func (m *ReportDetailItem) Reset()                    { *m = ReportDetailItem{} }
func (m *ReportDetailItem) String() string            { return proto.CompactTextString(m) }
func (*ReportDetailItem) ProtoMessage()               {}
func (*ReportDetailItem) Descriptor() ([]byte, []int) { return fileDescriptorOpenapi, []int{8} }

func (m *ReportDetailItem) GetStatus() DataStatus {
	if m != nil {
		return m.Status
	}
	return DataStatus_DATA_STATUS_EMPTY
}

func (m *ReportDetailItem) GetTag() DataTag {
	if m != nil {
		return m.Tag
	}
	return DataTag_DATA_TAG_EMPTY
}

func (m *ReportDetailItem) GetType() DataType {
	if m != nil {
		return m.Type
	}
	return DataType_DATA_TYPE_EMPTY
}

func (m *ReportDetailItem) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

// 可扩充请求消息头，封装通用的请求消息头.
type RequestHeader struct {
	// 请求唯一的trace_id，全局唯一，响应头中带回，用于跟踪服务.
	TraceId string `protobuf:"bytes,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	// 请求方幂等key,不传接口不提供幂等支持，请求唯一键=key+source.
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// 向服务者标明自己的身份，企业eid.
	Source string `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	// Token令牌.
	Token string `protobuf:"bytes,5,opt,name=token,proto3" json:"token,omitempty"`
	// 可选扩展信息，json格式.
	ExtJson string `protobuf:"bytes,1000,opt,name=ext_json,json=extJson,proto3" json:"ext_json,omitempty"`
}

func (m *RequestHeader) Reset()                    { *m = RequestHeader{} }
func (m *RequestHeader) String() string            { return proto.CompactTextString(m) }
func (*RequestHeader) ProtoMessage()               {}
func (*RequestHeader) Descriptor() ([]byte, []int) { return fileDescriptorOpenapi, []int{9} }

func (m *RequestHeader) GetTraceId() string {
	if m != nil {
		return m.TraceId
	}
	return ""
}

func (m *RequestHeader) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *RequestHeader) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *RequestHeader) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *RequestHeader) GetExtJson() string {
	if m != nil {
		return m.ExtJson
	}
	return ""
}

// 通用翻页请求消息.
type PageRequest struct {
	// 页码，[1,n].
	PageNum int32 `protobuf:"varint,1,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`
	// 分页大小.如果获取的是全部数据, 该字段值为0.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (m *PageRequest) Reset()                    { *m = PageRequest{} }
func (m *PageRequest) String() string            { return proto.CompactTextString(m) }
func (*PageRequest) ProtoMessage()               {}
func (*PageRequest) Descriptor() ([]byte, []int) { return fileDescriptorOpenapi, []int{10} }

func (m *PageRequest) GetPageNum() int32 {
	if m != nil {
		return m.PageNum
	}
	return 0
}

func (m *PageRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

// 获取Token请求
type TokenRequest struct {
	// 请求头.
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *TokenRequest) Reset()                    { *m = TokenRequest{} }
func (m *TokenRequest) String() string            { return proto.CompactTextString(m) }
func (*TokenRequest) ProtoMessage()               {}
func (*TokenRequest) Descriptor() ([]byte, []int) { return fileDescriptorOpenapi, []int{11} }

func (m *TokenRequest) GetHeader() *RequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

// 更新（新增）项目信息推送请求.
type ProjectUpdateRequest struct {
	// 请求头.
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// 项目列表.
	ProjectInfos []*ProjectInfo `protobuf:"bytes,2,rep,name=project_infos,json=projectInfos" json:"project_infos,omitempty"`
	// 基础信息推送任务ID.
	TaskId string `protobuf:"bytes,3,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (m *ProjectUpdateRequest) Reset()                    { *m = ProjectUpdateRequest{} }
func (m *ProjectUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*ProjectUpdateRequest) ProtoMessage()               {}
func (*ProjectUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptorOpenapi, []int{12} }

func (m *ProjectUpdateRequest) GetHeader() *RequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ProjectUpdateRequest) GetProjectInfos() []*ProjectInfo {
	if m != nil {
		return m.ProjectInfos
	}
	return nil
}

func (m *ProjectUpdateRequest) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

// 项目列表请求.
type ListProjectRequest struct {
	// 请求头.
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// 项目id，支持多个，保护窜查全部项目.
	PrjIds []string `protobuf:"bytes,2,rep,name=prj_ids,json=prjIds" json:"prj_ids,omitempty"`
	// 翻页请求.
	Page *PageRequest `protobuf:"bytes,110,opt,name=page" json:"page,omitempty"`
}

func (m *ListProjectRequest) Reset()                    { *m = ListProjectRequest{} }
func (m *ListProjectRequest) String() string            { return proto.CompactTextString(m) }
func (*ListProjectRequest) ProtoMessage()               {}
func (*ListProjectRequest) Descriptor() ([]byte, []int) { return fileDescriptorOpenapi, []int{13} }

func (m *ListProjectRequest) GetHeader() *RequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ListProjectRequest) GetPrjIds() []string {
	if m != nil {
		return m.PrjIds
	}
	return nil
}

func (m *ListProjectRequest) GetPage() *PageRequest {
	if m != nil {
		return m.Page
	}
	return nil
}

// 更新（新增）项目信息推送请求.
type BudgetUpdateRequest struct {
	// 请求头.
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// 预算信息列表.
	BudgetInfos []*BudgetInfo `protobuf:"bytes,2,rep,name=budget_infos,json=budgetInfos" json:"budget_infos,omitempty"`
}

func (m *BudgetUpdateRequest) Reset()                    { *m = BudgetUpdateRequest{} }
func (m *BudgetUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*BudgetUpdateRequest) ProtoMessage()               {}
func (*BudgetUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptorOpenapi, []int{14} }

func (m *BudgetUpdateRequest) GetHeader() *RequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *BudgetUpdateRequest) GetBudgetInfos() []*BudgetInfo {
	if m != nil {
		return m.BudgetInfos
	}
	return nil
}

// 预算调整请求,可支持多个,可幂等.
type BudgetReviseRequest struct {
	// 请求头.
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// 预算调整，支持多个.
	BudgetReviseItems []*BudgetReviseItem `protobuf:"bytes,2,rep,name=budget_revise_items,json=budgetReviseItems" json:"budget_revise_items,omitempty"`
}

func (m *BudgetReviseRequest) Reset()                    { *m = BudgetReviseRequest{} }
func (m *BudgetReviseRequest) String() string            { return proto.CompactTextString(m) }
func (*BudgetReviseRequest) ProtoMessage()               {}
func (*BudgetReviseRequest) Descriptor() ([]byte, []int) { return fileDescriptorOpenapi, []int{15} }

func (m *BudgetReviseRequest) GetHeader() *RequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *BudgetReviseRequest) GetBudgetReviseItems() []*BudgetReviseItem {
	if m != nil {
		return m.BudgetReviseItems
	}
	return nil
}

// 根据项目ID或者部门ID查子项目（execid执行ID）的预算，明细到itemcode级别.
type ListBudgetRequest struct {
	// 请求头.
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// 预算归属类型：项目、部门.
	Tp BudgetType `protobuf:"varint,2,opt,name=tp,proto3,enum=openapi.BudgetType" json:"tp,omitempty"`
	// 项目或者部门id,取决于tp，支持多个.
	TpIds []string `protobuf:"bytes,3,rep,name=tp_ids,json=tpIds" json:"tp_ids,omitempty"`
	// 可选扩展请求,如itemcode.
	Itemcodes []string `protobuf:"bytes,100,rep,name=itemcodes" json:"itemcodes,omitempty"`
	// 翻页请求.
	Page *PageRequest `protobuf:"bytes,110,opt,name=page" json:"page,omitempty"`
}

func (m *ListBudgetRequest) Reset()                    { *m = ListBudgetRequest{} }
func (m *ListBudgetRequest) String() string            { return proto.CompactTextString(m) }
func (*ListBudgetRequest) ProtoMessage()               {}
func (*ListBudgetRequest) Descriptor() ([]byte, []int) { return fileDescriptorOpenapi, []int{16} }

func (m *ListBudgetRequest) GetHeader() *RequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ListBudgetRequest) GetTp() BudgetType {
	if m != nil {
		return m.Tp
	}
	return BudgetType_BUDGET_TYPE_EMPTY
}

func (m *ListBudgetRequest) GetTpIds() []string {
	if m != nil {
		return m.TpIds
	}
	return nil
}

func (m *ListBudgetRequest) GetItemcodes() []string {
	if m != nil {
		return m.Itemcodes
	}
	return nil
}

func (m *ListBudgetRequest) GetPage() *PageRequest {
	if m != nil {
		return m.Page
	}
	return nil
}

// 更新（新增）用户信息推送请求，支持多个.
type EmployeeUpdateRequest struct {
	// 请求头.
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// 用户信息列表.
	EmployeeInfos []*EmployeeInfo `protobuf:"bytes,2,rep,name=employee_infos,json=employeeInfos" json:"employee_infos,omitempty"`
	// 基础信息推送任务ID.
	TaskId string `protobuf:"bytes,3,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (m *EmployeeUpdateRequest) Reset()                    { *m = EmployeeUpdateRequest{} }
func (m *EmployeeUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*EmployeeUpdateRequest) ProtoMessage()               {}
func (*EmployeeUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptorOpenapi, []int{17} }

func (m *EmployeeUpdateRequest) GetHeader() *RequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *EmployeeUpdateRequest) GetEmployeeInfos() []*EmployeeInfo {
	if m != nil {
		return m.EmployeeInfos
	}
	return nil
}

func (m *EmployeeUpdateRequest) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

// 用户列表请求.
type ListEmployeeRequest struct {
	// 请求头.
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// 员工id，支持多个，空集合请求全部.
	Ids []string `protobuf:"bytes,2,rep,name=ids" json:"ids,omitempty"`
	// 翻页请求.
	Page *PageRequest `protobuf:"bytes,110,opt,name=page" json:"page,omitempty"`
}

func (m *ListEmployeeRequest) Reset()                    { *m = ListEmployeeRequest{} }
func (m *ListEmployeeRequest) String() string            { return proto.CompactTextString(m) }
func (*ListEmployeeRequest) ProtoMessage()               {}
func (*ListEmployeeRequest) Descriptor() ([]byte, []int) { return fileDescriptorOpenapi, []int{18} }

func (m *ListEmployeeRequest) GetHeader() *RequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ListEmployeeRequest) GetIds() []string {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *ListEmployeeRequest) GetPage() *PageRequest {
	if m != nil {
		return m.Page
	}
	return nil
}

// 更新（新增）部门信息推送请求，支持多个.
type DepartmentUpdateRequest struct {
	// 请求头.
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// 用户信息列表.
	DepartmentInfos []*DepartmentInfo `protobuf:"bytes,2,rep,name=department_infos,json=departmentInfos" json:"department_infos,omitempty"`
	// 基础信息推送任务ID.
	TaskId string `protobuf:"bytes,3,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (m *DepartmentUpdateRequest) Reset()                    { *m = DepartmentUpdateRequest{} }
func (m *DepartmentUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*DepartmentUpdateRequest) ProtoMessage()               {}
func (*DepartmentUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptorOpenapi, []int{19} }

func (m *DepartmentUpdateRequest) GetHeader() *RequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *DepartmentUpdateRequest) GetDepartmentInfos() []*DepartmentInfo {
	if m != nil {
		return m.DepartmentInfos
	}
	return nil
}

func (m *DepartmentUpdateRequest) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

// 部门列表请求.
type ListDepartmentRequest struct {
	// 请求头.
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// 部门id，支持多个，不传查所有部门.
	DepIds []string `protobuf:"bytes,2,rep,name=dep_ids,json=depIds" json:"dep_ids,omitempty"`
	// 翻页请求.
	Page *PageRequest `protobuf:"bytes,110,opt,name=page" json:"page,omitempty"`
}

func (m *ListDepartmentRequest) Reset()                    { *m = ListDepartmentRequest{} }
func (m *ListDepartmentRequest) String() string            { return proto.CompactTextString(m) }
func (*ListDepartmentRequest) ProtoMessage()               {}
func (*ListDepartmentRequest) Descriptor() ([]byte, []int) { return fileDescriptorOpenapi, []int{20} }

func (m *ListDepartmentRequest) GetHeader() *RequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ListDepartmentRequest) GetDepIds() []string {
	if m != nil {
		return m.DepIds
	}
	return nil
}

func (m *ListDepartmentRequest) GetPage() *PageRequest {
	if m != nil {
		return m.Page
	}
	return nil
}

// 推送基础信息开始请求.
type FlushBeginRequest struct {
	// 请求头.
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// 作业流水号,请求方的提供流水号，作为作业全程ID.
	TaskId string `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (m *FlushBeginRequest) Reset()                    { *m = FlushBeginRequest{} }
func (m *FlushBeginRequest) String() string            { return proto.CompactTextString(m) }
func (*FlushBeginRequest) ProtoMessage()               {}
func (*FlushBeginRequest) Descriptor() ([]byte, []int) { return fileDescriptorOpenapi, []int{21} }

func (m *FlushBeginRequest) GetHeader() *RequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *FlushBeginRequest) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

// 推送基础信息结束请求.
type FlushEndRequest struct {
	// 请求头.
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// 作业流水号.
	TaskId string `protobuf:"bytes,2,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
}

func (m *FlushEndRequest) Reset()                    { *m = FlushEndRequest{} }
func (m *FlushEndRequest) String() string            { return proto.CompactTextString(m) }
func (*FlushEndRequest) ProtoMessage()               {}
func (*FlushEndRequest) Descriptor() ([]byte, []int) { return fileDescriptorOpenapi, []int{22} }

func (m *FlushEndRequest) GetHeader() *RequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *FlushEndRequest) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

// 数据推送统计报告请求.
type ReportCountRequest struct {
	// 请求头.
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *ReportCountRequest) Reset()                    { *m = ReportCountRequest{} }
func (m *ReportCountRequest) String() string            { return proto.CompactTextString(m) }
func (*ReportCountRequest) ProtoMessage()               {}
func (*ReportCountRequest) Descriptor() ([]byte, []int) { return fileDescriptorOpenapi, []int{23} }

func (m *ReportCountRequest) GetHeader() *RequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

// 数据推送数据
type ReportDetailRequest struct {
	// 请求头.
	Header *RequestHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// 数据类型列表,DATA_TYPE_ALL查所有数据类型.
	Types []DataType `protobuf:"varint,2,rep,packed,name=types,enum=openapi.DataType" json:"types,omitempty"`
}

func (m *ReportDetailRequest) Reset()                    { *m = ReportDetailRequest{} }
func (m *ReportDetailRequest) String() string            { return proto.CompactTextString(m) }
func (*ReportDetailRequest) ProtoMessage()               {}
func (*ReportDetailRequest) Descriptor() ([]byte, []int) { return fileDescriptorOpenapi, []int{24} }

func (m *ReportDetailRequest) GetHeader() *RequestHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ReportDetailRequest) GetTypes() []DataType {
	if m != nil {
		return m.Types
	}
	return nil
}

// 可扩充响应消息头，封装通用的请求消息头，可扩充.
type ResponseHeader struct {
	// 对应于请求的trace_id.
	TraceId string `protobuf:"bytes,1,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	// 服务总响应时间,ms.
	TotalTime int64 `protobuf:"varint,2,opt,name=total_time,json=totalTime,proto3" json:"total_time,omitempty"`
	// 通用状态，如参数校验等功能.
	Status Status `protobuf:"varint,10,opt,name=status,proto3,enum=openapi.Status" json:"status,omitempty"`
	// 错误消息，STATUS_SUCCESS时无此消息.
	Msg string `protobuf:"bytes,11,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *ResponseHeader) Reset()                    { *m = ResponseHeader{} }
func (m *ResponseHeader) String() string            { return proto.CompactTextString(m) }
func (*ResponseHeader) ProtoMessage()               {}
func (*ResponseHeader) Descriptor() ([]byte, []int) { return fileDescriptorOpenapi, []int{25} }

func (m *ResponseHeader) GetTraceId() string {
	if m != nil {
		return m.TraceId
	}
	return ""
}

func (m *ResponseHeader) GetTotalTime() int64 {
	if m != nil {
		return m.TotalTime
	}
	return 0
}

func (m *ResponseHeader) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_STATUS_EMPTY
}

func (m *ResponseHeader) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

// 通用翻页响应.
type PageResponse struct {
	// 页码，[1,n].
	PageNum int32 `protobuf:"varint,1,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`
	// 分页大小.如果获取的是全部数据, 该字段值为0.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// 总记录数.
	TotalCount int32 `protobuf:"varint,3,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (m *PageResponse) Reset()                    { *m = PageResponse{} }
func (m *PageResponse) String() string            { return proto.CompactTextString(m) }
func (*PageResponse) ProtoMessage()               {}
func (*PageResponse) Descriptor() ([]byte, []int) { return fileDescriptorOpenapi, []int{26} }

func (m *PageResponse) GetPageNum() int32 {
	if m != nil {
		return m.PageNum
	}
	return 0
}

func (m *PageResponse) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *PageResponse) GetTotalCount() int32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

// Token时间
type TokenResponse struct {
	// 响应头.
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// token
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	// 到期时间，unix time ms.
	Expire int64 `protobuf:"varint,3,opt,name=expire,proto3" json:"expire,omitempty"`
}

func (m *TokenResponse) Reset()                    { *m = TokenResponse{} }
func (m *TokenResponse) String() string            { return proto.CompactTextString(m) }
func (*TokenResponse) ProtoMessage()               {}
func (*TokenResponse) Descriptor() ([]byte, []int) { return fileDescriptorOpenapi, []int{27} }

func (m *TokenResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *TokenResponse) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *TokenResponse) GetExpire() int64 {
	if m != nil {
		return m.Expire
	}
	return 0
}

// 申请预算响应.
type ProjectUpdateResponse struct {
	// 响应头.
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// 操作结果.
	Result ActResult `protobuf:"varint,2,opt,name=result,proto3,enum=openapi.ActResult" json:"result,omitempty"`
	// ActResult 不是 ACT_RESULT_SUCCESS 时有此信息.
	Msg string `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *ProjectUpdateResponse) Reset()                    { *m = ProjectUpdateResponse{} }
func (m *ProjectUpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*ProjectUpdateResponse) ProtoMessage()               {}
func (*ProjectUpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptorOpenapi, []int{28} }

func (m *ProjectUpdateResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ProjectUpdateResponse) GetResult() ActResult {
	if m != nil {
		return m.Result
	}
	return ActResult_ACT_RESULT_EMPTY
}

func (m *ProjectUpdateResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type ListProjectResponse struct {
	// 响应头.
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// 项目列表.
	ProjectInfos []*ProjectInfo `protobuf:"bytes,2,rep,name=project_infos,json=projectInfos" json:"project_infos,omitempty"`
	// 响应翻页.
	Page *PageResponse `protobuf:"bytes,110,opt,name=page" json:"page,omitempty"`
}

func (m *ListProjectResponse) Reset()                    { *m = ListProjectResponse{} }
func (m *ListProjectResponse) String() string            { return proto.CompactTextString(m) }
func (*ListProjectResponse) ProtoMessage()               {}
func (*ListProjectResponse) Descriptor() ([]byte, []int) { return fileDescriptorOpenapi, []int{29} }

func (m *ListProjectResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ListProjectResponse) GetProjectInfos() []*ProjectInfo {
	if m != nil {
		return m.ProjectInfos
	}
	return nil
}

func (m *ListProjectResponse) GetPage() *PageResponse {
	if m != nil {
		return m.Page
	}
	return nil
}

// 推送预算信息响应.
type BudgetUpdateResponse struct {
	// 响应头.
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// 操作结果.
	Result ActResult `protobuf:"varint,2,opt,name=result,proto3,enum=openapi.ActResult" json:"result,omitempty"`
	// ActResult 不是 ACT_RESULT_SUCCESS 时有此信息.
	Msg string `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *BudgetUpdateResponse) Reset()                    { *m = BudgetUpdateResponse{} }
func (m *BudgetUpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*BudgetUpdateResponse) ProtoMessage()               {}
func (*BudgetUpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptorOpenapi, []int{30} }

func (m *BudgetUpdateResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *BudgetUpdateResponse) GetResult() ActResult {
	if m != nil {
		return m.Result
	}
	return ActResult_ACT_RESULT_EMPTY
}

func (m *BudgetUpdateResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

// 预算调整响应.
type BudgetReviseResponse struct {
	// 响应头.
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// 操作结果.
	Result ActResult `protobuf:"varint,2,opt,name=result,proto3,enum=openapi.ActResult" json:"result,omitempty"`
	// ActResult 不是 ACT_RESULT_SUCCESS 时信息.
	Msg string `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *BudgetReviseResponse) Reset()                    { *m = BudgetReviseResponse{} }
func (m *BudgetReviseResponse) String() string            { return proto.CompactTextString(m) }
func (*BudgetReviseResponse) ProtoMessage()               {}
func (*BudgetReviseResponse) Descriptor() ([]byte, []int) { return fileDescriptorOpenapi, []int{31} }

func (m *BudgetReviseResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *BudgetReviseResponse) GetResult() ActResult {
	if m != nil {
		return m.Result
	}
	return ActResult_ACT_RESULT_EMPTY
}

func (m *BudgetReviseResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

// 预算查询.
type ListBudgetResponse struct {
	// 响应头.
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// 项目列表.
	ProjectInfos []*ProjectInfo `protobuf:"bytes,2,rep,name=project_infos,json=projectInfos" json:"project_infos,omitempty"`
	// 响应翻页.
	Page *PageResponse `protobuf:"bytes,110,opt,name=page" json:"page,omitempty"`
}

func (m *ListBudgetResponse) Reset()                    { *m = ListBudgetResponse{} }
func (m *ListBudgetResponse) String() string            { return proto.CompactTextString(m) }
func (*ListBudgetResponse) ProtoMessage()               {}
func (*ListBudgetResponse) Descriptor() ([]byte, []int) { return fileDescriptorOpenapi, []int{32} }

func (m *ListBudgetResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ListBudgetResponse) GetProjectInfos() []*ProjectInfo {
	if m != nil {
		return m.ProjectInfos
	}
	return nil
}

func (m *ListBudgetResponse) GetPage() *PageResponse {
	if m != nil {
		return m.Page
	}
	return nil
}

// 更新用户信息响应.
type EmployeeUpdateResponse struct {
	// 响应头.
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// 操作结果.
	Result ActResult `protobuf:"varint,2,opt,name=result,proto3,enum=openapi.ActResult" json:"result,omitempty"`
	// ActResult 不是 ACT_RESULT_SUCCESS 时信息.
	Msg string `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *EmployeeUpdateResponse) Reset()                    { *m = EmployeeUpdateResponse{} }
func (m *EmployeeUpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*EmployeeUpdateResponse) ProtoMessage()               {}
func (*EmployeeUpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptorOpenapi, []int{33} }

func (m *EmployeeUpdateResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *EmployeeUpdateResponse) GetResult() ActResult {
	if m != nil {
		return m.Result
	}
	return ActResult_ACT_RESULT_EMPTY
}

func (m *EmployeeUpdateResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

// 用户列表响应.
type ListEmployeeResponse struct {
	// 响应头.
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// 员工信息.
	EmpInfos []*EmployeeInfo `protobuf:"bytes,2,rep,name=emp_infos,json=empInfos" json:"emp_infos,omitempty"`
	// 响应翻页.
	Page *PageResponse `protobuf:"bytes,110,opt,name=page" json:"page,omitempty"`
}

func (m *ListEmployeeResponse) Reset()                    { *m = ListEmployeeResponse{} }
func (m *ListEmployeeResponse) String() string            { return proto.CompactTextString(m) }
func (*ListEmployeeResponse) ProtoMessage()               {}
func (*ListEmployeeResponse) Descriptor() ([]byte, []int) { return fileDescriptorOpenapi, []int{34} }

func (m *ListEmployeeResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ListEmployeeResponse) GetEmpInfos() []*EmployeeInfo {
	if m != nil {
		return m.EmpInfos
	}
	return nil
}

func (m *ListEmployeeResponse) GetPage() *PageResponse {
	if m != nil {
		return m.Page
	}
	return nil
}

// 更新部门信息响应.
type DepartmentUpdateResponse struct {
	// 响应头.
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// 操作结果.
	Result ActResult `protobuf:"varint,2,opt,name=result,proto3,enum=openapi.ActResult" json:"result,omitempty"`
	// ActResult 不是 ACT_RESULT_SUCCESS 时信息.
	Msg string `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *DepartmentUpdateResponse) Reset()                    { *m = DepartmentUpdateResponse{} }
func (m *DepartmentUpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*DepartmentUpdateResponse) ProtoMessage()               {}
func (*DepartmentUpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptorOpenapi, []int{35} }

func (m *DepartmentUpdateResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *DepartmentUpdateResponse) GetResult() ActResult {
	if m != nil {
		return m.Result
	}
	return ActResult_ACT_RESULT_EMPTY
}

func (m *DepartmentUpdateResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

// 部门信息响应.
type ListDepartmentResponse struct {
	// 响应头.
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// 部门列表.
	DepInfos []*DepartmentInfo `protobuf:"bytes,2,rep,name=dep_infos,json=depInfos" json:"dep_infos,omitempty"`
	// 响应翻页.
	Page *PageResponse `protobuf:"bytes,110,opt,name=page" json:"page,omitempty"`
}

func (m *ListDepartmentResponse) Reset()                    { *m = ListDepartmentResponse{} }
func (m *ListDepartmentResponse) String() string            { return proto.CompactTextString(m) }
func (*ListDepartmentResponse) ProtoMessage()               {}
func (*ListDepartmentResponse) Descriptor() ([]byte, []int) { return fileDescriptorOpenapi, []int{36} }

func (m *ListDepartmentResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ListDepartmentResponse) GetDepInfos() []*DepartmentInfo {
	if m != nil {
		return m.DepInfos
	}
	return nil
}

func (m *ListDepartmentResponse) GetPage() *PageResponse {
	if m != nil {
		return m.Page
	}
	return nil
}

// 推送基础信息开始响应.
type FlushBeginResponse struct {
	// 响应头.
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// 操作结果.
	Result ActResult `protobuf:"varint,2,opt,name=result,proto3,enum=openapi.ActResult" json:"result,omitempty"`
	// 作业流水号.
	TaskId string `protobuf:"bytes,3,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	Msg    string `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *FlushBeginResponse) Reset()                    { *m = FlushBeginResponse{} }
func (m *FlushBeginResponse) String() string            { return proto.CompactTextString(m) }
func (*FlushBeginResponse) ProtoMessage()               {}
func (*FlushBeginResponse) Descriptor() ([]byte, []int) { return fileDescriptorOpenapi, []int{37} }

func (m *FlushBeginResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *FlushBeginResponse) GetResult() ActResult {
	if m != nil {
		return m.Result
	}
	return ActResult_ACT_RESULT_EMPTY
}

func (m *FlushBeginResponse) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *FlushBeginResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

// 推送基础信息结束响应.
type FlushEndResponse struct {
	// 响应头.
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// 操作结果.
	Result ActResult `protobuf:"varint,2,opt,name=result,proto3,enum=openapi.ActResult" json:"result,omitempty"`
	// 作业流水号.
	TaskId string `protobuf:"bytes,3,opt,name=task_id,json=taskId,proto3" json:"task_id,omitempty"`
	// ActResult 不是 ACT_RESULT_SUCCESS 时信息.
	Msg string `protobuf:"bytes,4,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *FlushEndResponse) Reset()                    { *m = FlushEndResponse{} }
func (m *FlushEndResponse) String() string            { return proto.CompactTextString(m) }
func (*FlushEndResponse) ProtoMessage()               {}
func (*FlushEndResponse) Descriptor() ([]byte, []int) { return fileDescriptorOpenapi, []int{38} }

func (m *FlushEndResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *FlushEndResponse) GetResult() ActResult {
	if m != nil {
		return m.Result
	}
	return ActResult_ACT_RESULT_EMPTY
}

func (m *FlushEndResponse) GetTaskId() string {
	if m != nil {
		return m.TaskId
	}
	return ""
}

func (m *FlushEndResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

// 数据推送统计报告请求.
type ReportCountResponse struct {
	// 响应头.
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// 统计结果.
	RptItems []*ReportCountItem `protobuf:"bytes,2,rep,name=rpt_items,json=rptItems" json:"rpt_items,omitempty"`
}

func (m *ReportCountResponse) Reset()                    { *m = ReportCountResponse{} }
func (m *ReportCountResponse) String() string            { return proto.CompactTextString(m) }
func (*ReportCountResponse) ProtoMessage()               {}
func (*ReportCountResponse) Descriptor() ([]byte, []int) { return fileDescriptorOpenapi, []int{39} }

func (m *ReportCountResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ReportCountResponse) GetRptItems() []*ReportCountItem {
	if m != nil {
		return m.RptItems
	}
	return nil
}

// 数据推送明细报告响应。
type ReportDetailResponse struct {
	// 响应头.
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
	// 统计结果.
	RptItems []*ReportDetailItem `protobuf:"bytes,2,rep,name=rpt_items,json=rptItems" json:"rpt_items,omitempty"`
}

func (m *ReportDetailResponse) Reset()                    { *m = ReportDetailResponse{} }
func (m *ReportDetailResponse) String() string            { return proto.CompactTextString(m) }
func (*ReportDetailResponse) ProtoMessage()               {}
func (*ReportDetailResponse) Descriptor() ([]byte, []int) { return fileDescriptorOpenapi, []int{40} }

func (m *ReportDetailResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *ReportDetailResponse) GetRptItems() []*ReportDetailItem {
	if m != nil {
		return m.RptItems
	}
	return nil
}

func init() {
	proto.RegisterType((*ProjectInfo)(nil), "openapi.ProjectInfo")
	proto.RegisterType((*TagItem)(nil), "openapi.TagItem")
	proto.RegisterType((*BudgetInfo)(nil), "openapi.BudgetInfo")
	proto.RegisterType((*BudgetReviseItem)(nil), "openapi.BudgetReviseItem")
	proto.RegisterType((*EmployeeInfo)(nil), "openapi.EmployeeInfo")
	proto.RegisterType((*IdInfo)(nil), "openapi.IdInfo")
	proto.RegisterType((*DepartmentInfo)(nil), "openapi.DepartmentInfo")
	proto.RegisterType((*ReportCountItem)(nil), "openapi.ReportCountItem")
	proto.RegisterType((*ReportDetailItem)(nil), "openapi.ReportDetailItem")
	proto.RegisterType((*RequestHeader)(nil), "openapi.RequestHeader")
	proto.RegisterType((*PageRequest)(nil), "openapi.PageRequest")
	proto.RegisterType((*TokenRequest)(nil), "openapi.TokenRequest")
	proto.RegisterType((*ProjectUpdateRequest)(nil), "openapi.ProjectUpdateRequest")
	proto.RegisterType((*ListProjectRequest)(nil), "openapi.ListProjectRequest")
	proto.RegisterType((*BudgetUpdateRequest)(nil), "openapi.BudgetUpdateRequest")
	proto.RegisterType((*BudgetReviseRequest)(nil), "openapi.BudgetReviseRequest")
	proto.RegisterType((*ListBudgetRequest)(nil), "openapi.ListBudgetRequest")
	proto.RegisterType((*EmployeeUpdateRequest)(nil), "openapi.EmployeeUpdateRequest")
	proto.RegisterType((*ListEmployeeRequest)(nil), "openapi.ListEmployeeRequest")
	proto.RegisterType((*DepartmentUpdateRequest)(nil), "openapi.DepartmentUpdateRequest")
	proto.RegisterType((*ListDepartmentRequest)(nil), "openapi.ListDepartmentRequest")
	proto.RegisterType((*FlushBeginRequest)(nil), "openapi.FlushBeginRequest")
	proto.RegisterType((*FlushEndRequest)(nil), "openapi.FlushEndRequest")
	proto.RegisterType((*ReportCountRequest)(nil), "openapi.ReportCountRequest")
	proto.RegisterType((*ReportDetailRequest)(nil), "openapi.ReportDetailRequest")
	proto.RegisterType((*ResponseHeader)(nil), "openapi.ResponseHeader")
	proto.RegisterType((*PageResponse)(nil), "openapi.PageResponse")
	proto.RegisterType((*TokenResponse)(nil), "openapi.TokenResponse")
	proto.RegisterType((*ProjectUpdateResponse)(nil), "openapi.ProjectUpdateResponse")
	proto.RegisterType((*ListProjectResponse)(nil), "openapi.ListProjectResponse")
	proto.RegisterType((*BudgetUpdateResponse)(nil), "openapi.BudgetUpdateResponse")
	proto.RegisterType((*BudgetReviseResponse)(nil), "openapi.BudgetReviseResponse")
	proto.RegisterType((*ListBudgetResponse)(nil), "openapi.ListBudgetResponse")
	proto.RegisterType((*EmployeeUpdateResponse)(nil), "openapi.EmployeeUpdateResponse")
	proto.RegisterType((*ListEmployeeResponse)(nil), "openapi.ListEmployeeResponse")
	proto.RegisterType((*DepartmentUpdateResponse)(nil), "openapi.DepartmentUpdateResponse")
	proto.RegisterType((*ListDepartmentResponse)(nil), "openapi.ListDepartmentResponse")
	proto.RegisterType((*FlushBeginResponse)(nil), "openapi.FlushBeginResponse")
	proto.RegisterType((*FlushEndResponse)(nil), "openapi.FlushEndResponse")
	proto.RegisterType((*ReportCountResponse)(nil), "openapi.ReportCountResponse")
	proto.RegisterType((*ReportDetailResponse)(nil), "openapi.ReportDetailResponse")
	proto.RegisterEnum("openapi.Status", Status_name, Status_value)
	proto.RegisterEnum("openapi.ActResult", ActResult_name, ActResult_value)
	proto.RegisterEnum("openapi.BudgetType", BudgetType_name, BudgetType_value)
	proto.RegisterEnum("openapi.EmpStatus", EmpStatus_name, EmpStatus_value)
	proto.RegisterEnum("openapi.PrjStatus", PrjStatus_name, PrjStatus_value)
	proto.RegisterEnum("openapi.Gender", Gender_name, Gender_value)
	proto.RegisterEnum("openapi.IdType", IdType_name, IdType_value)
	proto.RegisterEnum("openapi.DepStatus", DepStatus_name, DepStatus_value)
	proto.RegisterEnum("openapi.ExtraTag", ExtraTag_name, ExtraTag_value)
	proto.RegisterEnum("openapi.DataType", DataType_name, DataType_value)
	proto.RegisterEnum("openapi.DataStatus", DataStatus_name, DataStatus_value)
	proto.RegisterEnum("openapi.DataTag", DataTag_name, DataTag_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TokenService service

type TokenServiceClient interface {
	// 获取Token令牌.
	Token(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenResponse, error)
}

type tokenServiceClient struct {
	cc *grpc.ClientConn
}

func NewTokenServiceClient(cc *grpc.ClientConn) TokenServiceClient {
	return &tokenServiceClient{cc}
}

func (c *tokenServiceClient) Token(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenResponse, error) {
	out := new(TokenResponse)
	err := grpc.Invoke(ctx, "/openapi.TokenService/token", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TokenService service

type TokenServiceServer interface {
	// 获取Token令牌.
	Token(context.Context, *TokenRequest) (*TokenResponse, error)
}

func RegisterTokenServiceServer(s *grpc.Server, srv TokenServiceServer) {
	s.RegisterService(&_TokenService_serviceDesc, srv)
}

func _TokenService_Token_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).Token(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openapi.TokenService/Token",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).Token(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TokenService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openapi.TokenService",
	HandlerType: (*TokenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "token",
			Handler:    _TokenService_Token_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "openapi.proto",
}

// Client API for ProjectService service

type ProjectServiceClient interface {
	// 推送项目信息.
	Update(ctx context.Context, in *ProjectUpdateRequest, opts ...grpc.CallOption) (*ProjectUpdateResponse, error)
	Projects(ctx context.Context, in *ListProjectRequest, opts ...grpc.CallOption) (*ListProjectResponse, error)
}

type projectServiceClient struct {
	cc *grpc.ClientConn
}

func NewProjectServiceClient(cc *grpc.ClientConn) ProjectServiceClient {
	return &projectServiceClient{cc}
}

func (c *projectServiceClient) Update(ctx context.Context, in *ProjectUpdateRequest, opts ...grpc.CallOption) (*ProjectUpdateResponse, error) {
	out := new(ProjectUpdateResponse)
	err := grpc.Invoke(ctx, "/openapi.ProjectService/update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) Projects(ctx context.Context, in *ListProjectRequest, opts ...grpc.CallOption) (*ListProjectResponse, error) {
	out := new(ListProjectResponse)
	err := grpc.Invoke(ctx, "/openapi.ProjectService/projects", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProjectService service

type ProjectServiceServer interface {
	// 推送项目信息.
	Update(context.Context, *ProjectUpdateRequest) (*ProjectUpdateResponse, error)
	Projects(context.Context, *ListProjectRequest) (*ListProjectResponse, error)
}

func RegisterProjectServiceServer(s *grpc.Server, srv ProjectServiceServer) {
	s.RegisterService(&_ProjectService_serviceDesc, srv)
}

func _ProjectService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openapi.ProjectService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).Update(ctx, req.(*ProjectUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_Projects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).Projects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openapi.ProjectService/Projects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).Projects(ctx, req.(*ListProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProjectService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openapi.ProjectService",
	HandlerType: (*ProjectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "update",
			Handler:    _ProjectService_Update_Handler,
		},
		{
			MethodName: "projects",
			Handler:    _ProjectService_Projects_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "openapi.proto",
}

// Client API for BudgetService service

type BudgetServiceClient interface {
	// 推送预算信息.
	Update(ctx context.Context, in *BudgetUpdateRequest, opts ...grpc.CallOption) (*BudgetUpdateResponse, error)
	// 调整预算。
	Revise(ctx context.Context, in *BudgetReviseRequest, opts ...grpc.CallOption) (*BudgetReviseResponse, error)
	// 根据项目ID查子项目（execid）下费用预算.
	Budgets(ctx context.Context, in *ListBudgetRequest, opts ...grpc.CallOption) (*ListBudgetResponse, error)
}

type budgetServiceClient struct {
	cc *grpc.ClientConn
}

func NewBudgetServiceClient(cc *grpc.ClientConn) BudgetServiceClient {
	return &budgetServiceClient{cc}
}

func (c *budgetServiceClient) Update(ctx context.Context, in *BudgetUpdateRequest, opts ...grpc.CallOption) (*BudgetUpdateResponse, error) {
	out := new(BudgetUpdateResponse)
	err := grpc.Invoke(ctx, "/openapi.BudgetService/update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *budgetServiceClient) Revise(ctx context.Context, in *BudgetReviseRequest, opts ...grpc.CallOption) (*BudgetReviseResponse, error) {
	out := new(BudgetReviseResponse)
	err := grpc.Invoke(ctx, "/openapi.BudgetService/revise", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *budgetServiceClient) Budgets(ctx context.Context, in *ListBudgetRequest, opts ...grpc.CallOption) (*ListBudgetResponse, error) {
	out := new(ListBudgetResponse)
	err := grpc.Invoke(ctx, "/openapi.BudgetService/budgets", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BudgetService service

type BudgetServiceServer interface {
	// 推送预算信息.
	Update(context.Context, *BudgetUpdateRequest) (*BudgetUpdateResponse, error)
	// 调整预算。
	Revise(context.Context, *BudgetReviseRequest) (*BudgetReviseResponse, error)
	// 根据项目ID查子项目（execid）下费用预算.
	Budgets(context.Context, *ListBudgetRequest) (*ListBudgetResponse, error)
}

func RegisterBudgetServiceServer(s *grpc.Server, srv BudgetServiceServer) {
	s.RegisterService(&_BudgetService_serviceDesc, srv)
}

func _BudgetService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BudgetUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BudgetServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openapi.BudgetService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BudgetServiceServer).Update(ctx, req.(*BudgetUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BudgetService_Revise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BudgetReviseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BudgetServiceServer).Revise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openapi.BudgetService/Revise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BudgetServiceServer).Revise(ctx, req.(*BudgetReviseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BudgetService_Budgets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBudgetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BudgetServiceServer).Budgets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openapi.BudgetService/Budgets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BudgetServiceServer).Budgets(ctx, req.(*ListBudgetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BudgetService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openapi.BudgetService",
	HandlerType: (*BudgetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "update",
			Handler:    _BudgetService_Update_Handler,
		},
		{
			MethodName: "revise",
			Handler:    _BudgetService_Revise_Handler,
		},
		{
			MethodName: "budgets",
			Handler:    _BudgetService_Budgets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "openapi.proto",
}

// Client API for EmployeeService service

type EmployeeServiceClient interface {
	// 推送员工信息.
	Update(ctx context.Context, in *EmployeeUpdateRequest, opts ...grpc.CallOption) (*EmployeeUpdateResponse, error)
	// 查询员工信息.
	Employees(ctx context.Context, in *ListEmployeeRequest, opts ...grpc.CallOption) (*ListEmployeeResponse, error)
}

type employeeServiceClient struct {
	cc *grpc.ClientConn
}

func NewEmployeeServiceClient(cc *grpc.ClientConn) EmployeeServiceClient {
	return &employeeServiceClient{cc}
}

func (c *employeeServiceClient) Update(ctx context.Context, in *EmployeeUpdateRequest, opts ...grpc.CallOption) (*EmployeeUpdateResponse, error) {
	out := new(EmployeeUpdateResponse)
	err := grpc.Invoke(ctx, "/openapi.EmployeeService/update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *employeeServiceClient) Employees(ctx context.Context, in *ListEmployeeRequest, opts ...grpc.CallOption) (*ListEmployeeResponse, error) {
	out := new(ListEmployeeResponse)
	err := grpc.Invoke(ctx, "/openapi.EmployeeService/employees", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EmployeeService service

type EmployeeServiceServer interface {
	// 推送员工信息.
	Update(context.Context, *EmployeeUpdateRequest) (*EmployeeUpdateResponse, error)
	// 查询员工信息.
	Employees(context.Context, *ListEmployeeRequest) (*ListEmployeeResponse, error)
}

func RegisterEmployeeServiceServer(s *grpc.Server, srv EmployeeServiceServer) {
	s.RegisterService(&_EmployeeService_serviceDesc, srv)
}

func _EmployeeService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmployeeUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openapi.EmployeeService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).Update(ctx, req.(*EmployeeUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmployeeService_Employees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEmployeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmployeeServiceServer).Employees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openapi.EmployeeService/Employees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmployeeServiceServer).Employees(ctx, req.(*ListEmployeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EmployeeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openapi.EmployeeService",
	HandlerType: (*EmployeeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "update",
			Handler:    _EmployeeService_Update_Handler,
		},
		{
			MethodName: "employees",
			Handler:    _EmployeeService_Employees_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "openapi.proto",
}

// Client API for DepartmentService service

type DepartmentServiceClient interface {
	// 推送部门信息.
	Update(ctx context.Context, in *DepartmentUpdateRequest, opts ...grpc.CallOption) (*DepartmentUpdateResponse, error)
	// 查询部门信息.
	Departments(ctx context.Context, in *ListDepartmentRequest, opts ...grpc.CallOption) (*ListDepartmentResponse, error)
}

type departmentServiceClient struct {
	cc *grpc.ClientConn
}

func NewDepartmentServiceClient(cc *grpc.ClientConn) DepartmentServiceClient {
	return &departmentServiceClient{cc}
}

func (c *departmentServiceClient) Update(ctx context.Context, in *DepartmentUpdateRequest, opts ...grpc.CallOption) (*DepartmentUpdateResponse, error) {
	out := new(DepartmentUpdateResponse)
	err := grpc.Invoke(ctx, "/openapi.DepartmentService/update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *departmentServiceClient) Departments(ctx context.Context, in *ListDepartmentRequest, opts ...grpc.CallOption) (*ListDepartmentResponse, error) {
	out := new(ListDepartmentResponse)
	err := grpc.Invoke(ctx, "/openapi.DepartmentService/departments", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DepartmentService service

type DepartmentServiceServer interface {
	// 推送部门信息.
	Update(context.Context, *DepartmentUpdateRequest) (*DepartmentUpdateResponse, error)
	// 查询部门信息.
	Departments(context.Context, *ListDepartmentRequest) (*ListDepartmentResponse, error)
}

func RegisterDepartmentServiceServer(s *grpc.Server, srv DepartmentServiceServer) {
	s.RegisterService(&_DepartmentService_serviceDesc, srv)
}

func _DepartmentService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepartmentUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openapi.DepartmentService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentServiceServer).Update(ctx, req.(*DepartmentUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DepartmentService_Departments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDepartmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DepartmentServiceServer).Departments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openapi.DepartmentService/Departments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DepartmentServiceServer).Departments(ctx, req.(*ListDepartmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DepartmentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openapi.DepartmentService",
	HandlerType: (*DepartmentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "update",
			Handler:    _DepartmentService_Update_Handler,
		},
		{
			MethodName: "departments",
			Handler:    _DepartmentService_Departments_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "openapi.proto",
}

// Client API for FlushService service

type FlushServiceClient interface {
	// 开始基础信息推送.
	Begin(ctx context.Context, in *FlushBeginRequest, opts ...grpc.CallOption) (*FlushBeginResponse, error)
	// 推送基础信息结束.
	End(ctx context.Context, in *FlushEndRequest, opts ...grpc.CallOption) (*FlushEndResponse, error)
}

type flushServiceClient struct {
	cc *grpc.ClientConn
}

func NewFlushServiceClient(cc *grpc.ClientConn) FlushServiceClient {
	return &flushServiceClient{cc}
}

func (c *flushServiceClient) Begin(ctx context.Context, in *FlushBeginRequest, opts ...grpc.CallOption) (*FlushBeginResponse, error) {
	out := new(FlushBeginResponse)
	err := grpc.Invoke(ctx, "/openapi.FlushService/begin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flushServiceClient) End(ctx context.Context, in *FlushEndRequest, opts ...grpc.CallOption) (*FlushEndResponse, error) {
	out := new(FlushEndResponse)
	err := grpc.Invoke(ctx, "/openapi.FlushService/end", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FlushService service

type FlushServiceServer interface {
	// 开始基础信息推送.
	Begin(context.Context, *FlushBeginRequest) (*FlushBeginResponse, error)
	// 推送基础信息结束.
	End(context.Context, *FlushEndRequest) (*FlushEndResponse, error)
}

func RegisterFlushServiceServer(s *grpc.Server, srv FlushServiceServer) {
	s.RegisterService(&_FlushService_serviceDesc, srv)
}

func _FlushService_Begin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlushBeginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlushServiceServer).Begin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openapi.FlushService/Begin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlushServiceServer).Begin(ctx, req.(*FlushBeginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlushService_End_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlushEndRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlushServiceServer).End(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openapi.FlushService/End",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlushServiceServer).End(ctx, req.(*FlushEndRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FlushService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openapi.FlushService",
	HandlerType: (*FlushServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "begin",
			Handler:    _FlushService_Begin_Handler,
		},
		{
			MethodName: "end",
			Handler:    _FlushService_End_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "openapi.proto",
}

// Client API for ReportService service

type ReportServiceClient interface {
	// 推送统计.
	Count(ctx context.Context, in *ReportCountRequest, opts ...grpc.CallOption) (*ReportCountResponse, error)
	// 推送明细报告.
	Detail(ctx context.Context, in *ReportDetailRequest, opts ...grpc.CallOption) (*ReportDetailResponse, error)
}

type reportServiceClient struct {
	cc *grpc.ClientConn
}

func NewReportServiceClient(cc *grpc.ClientConn) ReportServiceClient {
	return &reportServiceClient{cc}
}

func (c *reportServiceClient) Count(ctx context.Context, in *ReportCountRequest, opts ...grpc.CallOption) (*ReportCountResponse, error) {
	out := new(ReportCountResponse)
	err := grpc.Invoke(ctx, "/openapi.ReportService/count", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reportServiceClient) Detail(ctx context.Context, in *ReportDetailRequest, opts ...grpc.CallOption) (*ReportDetailResponse, error) {
	out := new(ReportDetailResponse)
	err := grpc.Invoke(ctx, "/openapi.ReportService/detail", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ReportService service

type ReportServiceServer interface {
	// 推送统计.
	Count(context.Context, *ReportCountRequest) (*ReportCountResponse, error)
	// 推送明细报告.
	Detail(context.Context, *ReportDetailRequest) (*ReportDetailResponse, error)
}

func RegisterReportServiceServer(s *grpc.Server, srv ReportServiceServer) {
	s.RegisterService(&_ReportService_serviceDesc, srv)
}

func _ReportService_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openapi.ReportService/Count",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).Count(ctx, req.(*ReportCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReportService_Detail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReportServiceServer).Detail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openapi.ReportService/Detail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReportServiceServer).Detail(ctx, req.(*ReportDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ReportService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openapi.ReportService",
	HandlerType: (*ReportServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "count",
			Handler:    _ReportService_Count_Handler,
		},
		{
			MethodName: "detail",
			Handler:    _ReportService_Detail_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "openapi.proto",
}

func (m *ProjectInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProjectInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.ParentId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.ParentId)))
		i += copy(dAtA[i:], m.ParentId)
	}
	if len(m.ApproverIds) > 0 {
		for _, s := range m.ApproverIds {
			dAtA[i] = 0x2a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Status != 0 {
		dAtA[i] = 0xa0
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Status))
	}
	if len(m.Tags) > 0 {
		for _, msg := range m.Tags {
			dAtA[i] = 0xea
			i++
			dAtA[i] = 0x6
			i++
			i = encodeVarintOpenapi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *TagItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TagItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Tag != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Tag))
	}
	if len(m.Val) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.Val)))
		i += copy(dAtA[i:], m.Val)
	}
	return i, nil
}

func (m *BudgetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BudgetInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Total != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Total))
	}
	if m.Available != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Available))
	}
	if len(m.ApproverId) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.ApproverId)))
		i += copy(dAtA[i:], m.ApproverId)
	}
	if m.Status {
		dAtA[i] = 0x30
		i++
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Tp != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Tp))
	}
	if len(m.TpId) > 0 {
		dAtA[i] = 0xb2
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.TpId)))
		i += copy(dAtA[i:], m.TpId)
	}
	if len(m.DepId) > 0 {
		dAtA[i] = 0xba
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.DepId)))
		i += copy(dAtA[i:], m.DepId)
	}
	if len(m.SubprjId) > 0 {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.SubprjId)))
		i += copy(dAtA[i:], m.SubprjId)
	}
	if len(m.Itemcode) > 0 {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.Itemcode)))
		i += copy(dAtA[i:], m.Itemcode)
	}
	if len(m.SubprjName) > 0 {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.SubprjName)))
		i += copy(dAtA[i:], m.SubprjName)
	}
	if len(m.Belong) > 0 {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.Belong)))
		i += copy(dAtA[i:], m.Belong)
	}
	if len(m.TpName) > 0 {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.TpName)))
		i += copy(dAtA[i:], m.TpName)
	}
	if len(m.Tags) > 0 {
		for _, msg := range m.Tags {
			dAtA[i] = 0xea
			i++
			dAtA[i] = 0x6
			i++
			i = encodeVarintOpenapi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *BudgetReviseItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BudgetReviseItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.Tp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Tp))
	}
	if len(m.TpId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.TpId)))
		i += copy(dAtA[i:], m.TpId)
	}
	if len(m.SubprjId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.SubprjId)))
		i += copy(dAtA[i:], m.SubprjId)
	}
	if len(m.ItemCode) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.ItemCode)))
		i += copy(dAtA[i:], m.ItemCode)
	}
	if m.Total != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Total))
	}
	return i, nil
}

func (m *EmployeeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmployeeInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.EnName) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.EnName)))
		i += copy(dAtA[i:], m.EnName)
	}
	if len(m.Nationality) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.Nationality)))
		i += copy(dAtA[i:], m.Nationality)
	}
	if len(m.DepId) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.DepId)))
		i += copy(dAtA[i:], m.DepId)
	}
	if len(m.IdInfos) > 0 {
		for _, msg := range m.IdInfos {
			dAtA[i] = 0x32
			i++
			i = encodeVarintOpenapi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Status != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Status))
	}
	if len(m.ApproverIds) > 0 {
		for _, s := range m.ApproverIds {
			dAtA[i] = 0x4a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if len(m.Passwd) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.Passwd)))
		i += copy(dAtA[i:], m.Passwd)
	}
	if len(m.Mobile) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.Mobile)))
		i += copy(dAtA[i:], m.Mobile)
	}
	if m.Level != 0 {
		dAtA[i] = 0xa8
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Level))
	}
	if m.Gender != 0 {
		dAtA[i] = 0xb0
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Gender))
	}
	if len(m.EnLastname) > 0 {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.EnLastname)))
		i += copy(dAtA[i:], m.EnLastname)
	}
	if len(m.EnFirstname) > 0 {
		dAtA[i] = 0xca
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.EnFirstname)))
		i += copy(dAtA[i:], m.EnFirstname)
	}
	if len(m.CnLastname) > 0 {
		dAtA[i] = 0xd2
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.CnLastname)))
		i += copy(dAtA[i:], m.CnLastname)
	}
	if len(m.CnFirstname) > 0 {
		dAtA[i] = 0xda
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.CnFirstname)))
		i += copy(dAtA[i:], m.CnFirstname)
	}
	if len(m.Birthday) > 0 {
		dAtA[i] = 0xe2
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.Birthday)))
		i += copy(dAtA[i:], m.Birthday)
	}
	if len(m.Tags) > 0 {
		for _, msg := range m.Tags {
			dAtA[i] = 0xea
			i++
			dAtA[i] = 0x6
			i++
			i = encodeVarintOpenapi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *IdInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IdInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IdType != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.IdType))
	}
	if len(m.IdNumber) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.IdNumber)))
		i += copy(dAtA[i:], m.IdNumber)
	}
	if len(m.Idindate) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.Idindate)))
		i += copy(dAtA[i:], m.Idindate)
	}
	if len(m.Idcountry) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.Idcountry)))
		i += copy(dAtA[i:], m.Idcountry)
	}
	return i, nil
}

func (m *DepartmentInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DepartmentInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.EnName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.EnName)))
		i += copy(dAtA[i:], m.EnName)
	}
	if len(m.SuperDepid) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.SuperDepid)))
		i += copy(dAtA[i:], m.SuperDepid)
	}
	if len(m.ApproverIds) > 0 {
		for _, s := range m.ApproverIds {
			dAtA[i] = 0x3a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Status != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Status))
	}
	if len(m.Tags) > 0 {
		for _, msg := range m.Tags {
			dAtA[i] = 0xea
			i++
			dAtA[i] = 0x6
			i++
			i = encodeVarintOpenapi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ReportCountItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportCountItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Status))
	}
	if m.Tag != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Tag))
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Type))
	}
	if m.Count != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Count))
	}
	return i, nil
}

func (m *ReportDetailItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportDetailItem) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Status))
	}
	if m.Tag != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Tag))
	}
	if m.Type != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Type))
	}
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *RequestHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RequestHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TraceId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.TraceId)))
		i += copy(dAtA[i:], m.TraceId)
	}
	if len(m.Key) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Source) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.Source)))
		i += copy(dAtA[i:], m.Source)
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if len(m.ExtJson) > 0 {
		dAtA[i] = 0xc2
		i++
		dAtA[i] = 0x3e
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.ExtJson)))
		i += copy(dAtA[i:], m.ExtJson)
	}
	return i, nil
}

func (m *PageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PageRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PageNum != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.PageNum))
	}
	if m.PageSize != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.PageSize))
	}
	return i, nil
}

func (m *TokenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Header.Size()))
		n1, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *ProjectUpdateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProjectUpdateRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Header.Size()))
		n2, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.ProjectInfos) > 0 {
		for _, msg := range m.ProjectInfos {
			dAtA[i] = 0x12
			i++
			i = encodeVarintOpenapi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.TaskId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.TaskId)))
		i += copy(dAtA[i:], m.TaskId)
	}
	return i, nil
}

func (m *ListProjectRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListProjectRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Header.Size()))
		n3, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.PrjIds) > 0 {
		for _, s := range m.PrjIds {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Page != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Page.Size()))
		n4, err := m.Page.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *BudgetUpdateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BudgetUpdateRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Header.Size()))
		n5, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.BudgetInfos) > 0 {
		for _, msg := range m.BudgetInfos {
			dAtA[i] = 0x12
			i++
			i = encodeVarintOpenapi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *BudgetReviseRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BudgetReviseRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Header.Size()))
		n6, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if len(m.BudgetReviseItems) > 0 {
		for _, msg := range m.BudgetReviseItems {
			dAtA[i] = 0x12
			i++
			i = encodeVarintOpenapi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ListBudgetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListBudgetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Header.Size()))
		n7, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n7
	}
	if m.Tp != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Tp))
	}
	if len(m.TpIds) > 0 {
		for _, s := range m.TpIds {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if len(m.Itemcodes) > 0 {
		for _, s := range m.Itemcodes {
			dAtA[i] = 0xa2
			i++
			dAtA[i] = 0x6
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Page != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Page.Size()))
		n8, err := m.Page.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n8
	}
	return i, nil
}

func (m *EmployeeUpdateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmployeeUpdateRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Header.Size()))
		n9, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n9
	}
	if len(m.EmployeeInfos) > 0 {
		for _, msg := range m.EmployeeInfos {
			dAtA[i] = 0x12
			i++
			i = encodeVarintOpenapi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.TaskId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.TaskId)))
		i += copy(dAtA[i:], m.TaskId)
	}
	return i, nil
}

func (m *ListEmployeeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListEmployeeRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Header.Size()))
		n10, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n10
	}
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Page != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Page.Size()))
		n11, err := m.Page.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n11
	}
	return i, nil
}

func (m *DepartmentUpdateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DepartmentUpdateRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Header.Size()))
		n12, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n12
	}
	if len(m.DepartmentInfos) > 0 {
		for _, msg := range m.DepartmentInfos {
			dAtA[i] = 0x12
			i++
			i = encodeVarintOpenapi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.TaskId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.TaskId)))
		i += copy(dAtA[i:], m.TaskId)
	}
	return i, nil
}

func (m *ListDepartmentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListDepartmentRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Header.Size()))
		n13, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n13
	}
	if len(m.DepIds) > 0 {
		for _, s := range m.DepIds {
			dAtA[i] = 0x12
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Page != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Page.Size()))
		n14, err := m.Page.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n14
	}
	return i, nil
}

func (m *FlushBeginRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlushBeginRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Header.Size()))
		n15, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n15
	}
	if len(m.TaskId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.TaskId)))
		i += copy(dAtA[i:], m.TaskId)
	}
	return i, nil
}

func (m *FlushEndRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlushEndRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Header.Size()))
		n16, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n16
	}
	if len(m.TaskId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.TaskId)))
		i += copy(dAtA[i:], m.TaskId)
	}
	return i, nil
}

func (m *ReportCountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportCountRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Header.Size()))
		n17, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n17
	}
	return i, nil
}

func (m *ReportDetailRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportDetailRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Header.Size()))
		n18, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n18
	}
	if len(m.Types) > 0 {
		dAtA20 := make([]byte, len(m.Types)*10)
		var j19 int
		for _, num := range m.Types {
			for num >= 1<<7 {
				dAtA20[j19] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j19++
			}
			dAtA20[j19] = uint8(num)
			j19++
		}
		dAtA[i] = 0x12
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(j19))
		i += copy(dAtA[i:], dAtA20[:j19])
	}
	return i, nil
}

func (m *ResponseHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResponseHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TraceId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.TraceId)))
		i += copy(dAtA[i:], m.TraceId)
	}
	if m.TotalTime != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.TotalTime))
	}
	if m.Status != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Status))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	return i, nil
}

func (m *PageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PageResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.PageNum != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.PageNum))
	}
	if m.PageSize != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.PageSize))
	}
	if m.TotalCount != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.TotalCount))
	}
	return i, nil
}

func (m *TokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Header.Size()))
		n21, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n21
	}
	if len(m.Token) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.Token)))
		i += copy(dAtA[i:], m.Token)
	}
	if m.Expire != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Expire))
	}
	return i, nil
}

func (m *ProjectUpdateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProjectUpdateResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Header.Size()))
		n22, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n22
	}
	if m.Result != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Result))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	return i, nil
}

func (m *ListProjectResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListProjectResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Header.Size()))
		n23, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n23
	}
	if len(m.ProjectInfos) > 0 {
		for _, msg := range m.ProjectInfos {
			dAtA[i] = 0x12
			i++
			i = encodeVarintOpenapi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Page != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Page.Size()))
		n24, err := m.Page.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n24
	}
	return i, nil
}

func (m *BudgetUpdateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BudgetUpdateResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Header.Size()))
		n25, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n25
	}
	if m.Result != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Result))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	return i, nil
}

func (m *BudgetReviseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BudgetReviseResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Header.Size()))
		n26, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n26
	}
	if m.Result != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Result))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	return i, nil
}

func (m *ListBudgetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListBudgetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Header.Size()))
		n27, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n27
	}
	if len(m.ProjectInfos) > 0 {
		for _, msg := range m.ProjectInfos {
			dAtA[i] = 0x12
			i++
			i = encodeVarintOpenapi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Page != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Page.Size()))
		n28, err := m.Page.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n28
	}
	return i, nil
}

func (m *EmployeeUpdateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmployeeUpdateResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Header.Size()))
		n29, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n29
	}
	if m.Result != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Result))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	return i, nil
}

func (m *ListEmployeeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListEmployeeResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Header.Size()))
		n30, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n30
	}
	if len(m.EmpInfos) > 0 {
		for _, msg := range m.EmpInfos {
			dAtA[i] = 0x12
			i++
			i = encodeVarintOpenapi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Page != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Page.Size()))
		n31, err := m.Page.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n31
	}
	return i, nil
}

func (m *DepartmentUpdateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DepartmentUpdateResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Header.Size()))
		n32, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n32
	}
	if m.Result != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Result))
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	return i, nil
}

func (m *ListDepartmentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListDepartmentResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Header.Size()))
		n33, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n33
	}
	if len(m.DepInfos) > 0 {
		for _, msg := range m.DepInfos {
			dAtA[i] = 0x12
			i++
			i = encodeVarintOpenapi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Page != nil {
		dAtA[i] = 0xf2
		i++
		dAtA[i] = 0x6
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Page.Size()))
		n34, err := m.Page.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n34
	}
	return i, nil
}

func (m *FlushBeginResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlushBeginResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Header.Size()))
		n35, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n35
	}
	if m.Result != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Result))
	}
	if len(m.TaskId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.TaskId)))
		i += copy(dAtA[i:], m.TaskId)
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	return i, nil
}

func (m *FlushEndResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FlushEndResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Header.Size()))
		n36, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n36
	}
	if m.Result != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Result))
	}
	if len(m.TaskId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.TaskId)))
		i += copy(dAtA[i:], m.TaskId)
	}
	if len(m.Msg) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(len(m.Msg)))
		i += copy(dAtA[i:], m.Msg)
	}
	return i, nil
}

func (m *ReportCountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportCountResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Header.Size()))
		n37, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n37
	}
	if len(m.RptItems) > 0 {
		for _, msg := range m.RptItems {
			dAtA[i] = 0x12
			i++
			i = encodeVarintOpenapi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ReportDetailResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReportDetailResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintOpenapi(dAtA, i, uint64(m.Header.Size()))
		n38, err := m.Header.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n38
	}
	if len(m.RptItems) > 0 {
		for _, msg := range m.RptItems {
			dAtA[i] = 0x12
			i++
			i = encodeVarintOpenapi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeVarintOpenapi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ProjectInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovOpenapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovOpenapi(uint64(l))
	}
	l = len(m.ParentId)
	if l > 0 {
		n += 1 + l + sovOpenapi(uint64(l))
	}
	if len(m.ApproverIds) > 0 {
		for _, s := range m.ApproverIds {
			l = len(s)
			n += 1 + l + sovOpenapi(uint64(l))
		}
	}
	if m.Status != 0 {
		n += 2 + sovOpenapi(uint64(m.Status))
	}
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 2 + l + sovOpenapi(uint64(l))
		}
	}
	return n
}

func (m *TagItem) Size() (n int) {
	var l int
	_ = l
	if m.Tag != 0 {
		n += 1 + sovOpenapi(uint64(m.Tag))
	}
	l = len(m.Val)
	if l > 0 {
		n += 1 + l + sovOpenapi(uint64(l))
	}
	return n
}

func (m *BudgetInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovOpenapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovOpenapi(uint64(l))
	}
	if m.Total != 0 {
		n += 1 + sovOpenapi(uint64(m.Total))
	}
	if m.Available != 0 {
		n += 1 + sovOpenapi(uint64(m.Available))
	}
	l = len(m.ApproverId)
	if l > 0 {
		n += 1 + l + sovOpenapi(uint64(l))
	}
	if m.Status {
		n += 2
	}
	if m.Tp != 0 {
		n += 1 + sovOpenapi(uint64(m.Tp))
	}
	l = len(m.TpId)
	if l > 0 {
		n += 2 + l + sovOpenapi(uint64(l))
	}
	l = len(m.DepId)
	if l > 0 {
		n += 2 + l + sovOpenapi(uint64(l))
	}
	l = len(m.SubprjId)
	if l > 0 {
		n += 2 + l + sovOpenapi(uint64(l))
	}
	l = len(m.Itemcode)
	if l > 0 {
		n += 2 + l + sovOpenapi(uint64(l))
	}
	l = len(m.SubprjName)
	if l > 0 {
		n += 2 + l + sovOpenapi(uint64(l))
	}
	l = len(m.Belong)
	if l > 0 {
		n += 2 + l + sovOpenapi(uint64(l))
	}
	l = len(m.TpName)
	if l > 0 {
		n += 2 + l + sovOpenapi(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 2 + l + sovOpenapi(uint64(l))
		}
	}
	return n
}

func (m *BudgetReviseItem) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovOpenapi(uint64(l))
	}
	if m.Tp != 0 {
		n += 1 + sovOpenapi(uint64(m.Tp))
	}
	l = len(m.TpId)
	if l > 0 {
		n += 1 + l + sovOpenapi(uint64(l))
	}
	l = len(m.SubprjId)
	if l > 0 {
		n += 1 + l + sovOpenapi(uint64(l))
	}
	l = len(m.ItemCode)
	if l > 0 {
		n += 1 + l + sovOpenapi(uint64(l))
	}
	if m.Total != 0 {
		n += 1 + sovOpenapi(uint64(m.Total))
	}
	return n
}

func (m *EmployeeInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovOpenapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovOpenapi(uint64(l))
	}
	l = len(m.EnName)
	if l > 0 {
		n += 1 + l + sovOpenapi(uint64(l))
	}
	l = len(m.Nationality)
	if l > 0 {
		n += 1 + l + sovOpenapi(uint64(l))
	}
	l = len(m.DepId)
	if l > 0 {
		n += 1 + l + sovOpenapi(uint64(l))
	}
	if len(m.IdInfos) > 0 {
		for _, e := range m.IdInfos {
			l = e.Size()
			n += 1 + l + sovOpenapi(uint64(l))
		}
	}
	if m.Status != 0 {
		n += 1 + sovOpenapi(uint64(m.Status))
	}
	if len(m.ApproverIds) > 0 {
		for _, s := range m.ApproverIds {
			l = len(s)
			n += 1 + l + sovOpenapi(uint64(l))
		}
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovOpenapi(uint64(l))
	}
	l = len(m.Passwd)
	if l > 0 {
		n += 1 + l + sovOpenapi(uint64(l))
	}
	l = len(m.Mobile)
	if l > 0 {
		n += 2 + l + sovOpenapi(uint64(l))
	}
	if m.Level != 0 {
		n += 2 + sovOpenapi(uint64(m.Level))
	}
	if m.Gender != 0 {
		n += 2 + sovOpenapi(uint64(m.Gender))
	}
	l = len(m.EnLastname)
	if l > 0 {
		n += 2 + l + sovOpenapi(uint64(l))
	}
	l = len(m.EnFirstname)
	if l > 0 {
		n += 2 + l + sovOpenapi(uint64(l))
	}
	l = len(m.CnLastname)
	if l > 0 {
		n += 2 + l + sovOpenapi(uint64(l))
	}
	l = len(m.CnFirstname)
	if l > 0 {
		n += 2 + l + sovOpenapi(uint64(l))
	}
	l = len(m.Birthday)
	if l > 0 {
		n += 2 + l + sovOpenapi(uint64(l))
	}
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 2 + l + sovOpenapi(uint64(l))
		}
	}
	return n
}

func (m *IdInfo) Size() (n int) {
	var l int
	_ = l
	if m.IdType != 0 {
		n += 1 + sovOpenapi(uint64(m.IdType))
	}
	l = len(m.IdNumber)
	if l > 0 {
		n += 1 + l + sovOpenapi(uint64(l))
	}
	l = len(m.Idindate)
	if l > 0 {
		n += 1 + l + sovOpenapi(uint64(l))
	}
	l = len(m.Idcountry)
	if l > 0 {
		n += 1 + l + sovOpenapi(uint64(l))
	}
	return n
}

func (m *DepartmentInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovOpenapi(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovOpenapi(uint64(l))
	}
	l = len(m.EnName)
	if l > 0 {
		n += 1 + l + sovOpenapi(uint64(l))
	}
	l = len(m.SuperDepid)
	if l > 0 {
		n += 1 + l + sovOpenapi(uint64(l))
	}
	if len(m.ApproverIds) > 0 {
		for _, s := range m.ApproverIds {
			l = len(s)
			n += 1 + l + sovOpenapi(uint64(l))
		}
	}
	if m.Status != 0 {
		n += 1 + sovOpenapi(uint64(m.Status))
	}
	if len(m.Tags) > 0 {
		for _, e := range m.Tags {
			l = e.Size()
			n += 2 + l + sovOpenapi(uint64(l))
		}
	}
	return n
}

func (m *ReportCountItem) Size() (n int) {
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovOpenapi(uint64(m.Status))
	}
	if m.Tag != 0 {
		n += 1 + sovOpenapi(uint64(m.Tag))
	}
	if m.Type != 0 {
		n += 1 + sovOpenapi(uint64(m.Type))
	}
	if m.Count != 0 {
		n += 1 + sovOpenapi(uint64(m.Count))
	}
	return n
}

func (m *ReportDetailItem) Size() (n int) {
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovOpenapi(uint64(m.Status))
	}
	if m.Tag != 0 {
		n += 1 + sovOpenapi(uint64(m.Tag))
	}
	if m.Type != 0 {
		n += 1 + sovOpenapi(uint64(m.Type))
	}
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			l = len(s)
			n += 1 + l + sovOpenapi(uint64(l))
		}
	}
	return n
}

func (m *RequestHeader) Size() (n int) {
	var l int
	_ = l
	l = len(m.TraceId)
	if l > 0 {
		n += 1 + l + sovOpenapi(uint64(l))
	}
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovOpenapi(uint64(l))
	}
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovOpenapi(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovOpenapi(uint64(l))
	}
	l = len(m.ExtJson)
	if l > 0 {
		n += 2 + l + sovOpenapi(uint64(l))
	}
	return n
}

func (m *PageRequest) Size() (n int) {
	var l int
	_ = l
	if m.PageNum != 0 {
		n += 1 + sovOpenapi(uint64(m.PageNum))
	}
	if m.PageSize != 0 {
		n += 1 + sovOpenapi(uint64(m.PageSize))
	}
	return n
}

func (m *TokenRequest) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovOpenapi(uint64(l))
	}
	return n
}

func (m *ProjectUpdateRequest) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovOpenapi(uint64(l))
	}
	if len(m.ProjectInfos) > 0 {
		for _, e := range m.ProjectInfos {
			l = e.Size()
			n += 1 + l + sovOpenapi(uint64(l))
		}
	}
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovOpenapi(uint64(l))
	}
	return n
}

func (m *ListProjectRequest) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovOpenapi(uint64(l))
	}
	if len(m.PrjIds) > 0 {
		for _, s := range m.PrjIds {
			l = len(s)
			n += 1 + l + sovOpenapi(uint64(l))
		}
	}
	if m.Page != nil {
		l = m.Page.Size()
		n += 2 + l + sovOpenapi(uint64(l))
	}
	return n
}

func (m *BudgetUpdateRequest) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovOpenapi(uint64(l))
	}
	if len(m.BudgetInfos) > 0 {
		for _, e := range m.BudgetInfos {
			l = e.Size()
			n += 1 + l + sovOpenapi(uint64(l))
		}
	}
	return n
}

func (m *BudgetReviseRequest) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovOpenapi(uint64(l))
	}
	if len(m.BudgetReviseItems) > 0 {
		for _, e := range m.BudgetReviseItems {
			l = e.Size()
			n += 1 + l + sovOpenapi(uint64(l))
		}
	}
	return n
}

func (m *ListBudgetRequest) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovOpenapi(uint64(l))
	}
	if m.Tp != 0 {
		n += 1 + sovOpenapi(uint64(m.Tp))
	}
	if len(m.TpIds) > 0 {
		for _, s := range m.TpIds {
			l = len(s)
			n += 1 + l + sovOpenapi(uint64(l))
		}
	}
	if len(m.Itemcodes) > 0 {
		for _, s := range m.Itemcodes {
			l = len(s)
			n += 2 + l + sovOpenapi(uint64(l))
		}
	}
	if m.Page != nil {
		l = m.Page.Size()
		n += 2 + l + sovOpenapi(uint64(l))
	}
	return n
}

func (m *EmployeeUpdateRequest) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovOpenapi(uint64(l))
	}
	if len(m.EmployeeInfos) > 0 {
		for _, e := range m.EmployeeInfos {
			l = e.Size()
			n += 1 + l + sovOpenapi(uint64(l))
		}
	}
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovOpenapi(uint64(l))
	}
	return n
}

func (m *ListEmployeeRequest) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovOpenapi(uint64(l))
	}
	if len(m.Ids) > 0 {
		for _, s := range m.Ids {
			l = len(s)
			n += 1 + l + sovOpenapi(uint64(l))
		}
	}
	if m.Page != nil {
		l = m.Page.Size()
		n += 2 + l + sovOpenapi(uint64(l))
	}
	return n
}

func (m *DepartmentUpdateRequest) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovOpenapi(uint64(l))
	}
	if len(m.DepartmentInfos) > 0 {
		for _, e := range m.DepartmentInfos {
			l = e.Size()
			n += 1 + l + sovOpenapi(uint64(l))
		}
	}
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovOpenapi(uint64(l))
	}
	return n
}

func (m *ListDepartmentRequest) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovOpenapi(uint64(l))
	}
	if len(m.DepIds) > 0 {
		for _, s := range m.DepIds {
			l = len(s)
			n += 1 + l + sovOpenapi(uint64(l))
		}
	}
	if m.Page != nil {
		l = m.Page.Size()
		n += 2 + l + sovOpenapi(uint64(l))
	}
	return n
}

func (m *FlushBeginRequest) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovOpenapi(uint64(l))
	}
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovOpenapi(uint64(l))
	}
	return n
}

func (m *FlushEndRequest) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovOpenapi(uint64(l))
	}
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovOpenapi(uint64(l))
	}
	return n
}

func (m *ReportCountRequest) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovOpenapi(uint64(l))
	}
	return n
}

func (m *ReportDetailRequest) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovOpenapi(uint64(l))
	}
	if len(m.Types) > 0 {
		l = 0
		for _, e := range m.Types {
			l += sovOpenapi(uint64(e))
		}
		n += 1 + sovOpenapi(uint64(l)) + l
	}
	return n
}

func (m *ResponseHeader) Size() (n int) {
	var l int
	_ = l
	l = len(m.TraceId)
	if l > 0 {
		n += 1 + l + sovOpenapi(uint64(l))
	}
	if m.TotalTime != 0 {
		n += 1 + sovOpenapi(uint64(m.TotalTime))
	}
	if m.Status != 0 {
		n += 1 + sovOpenapi(uint64(m.Status))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovOpenapi(uint64(l))
	}
	return n
}

func (m *PageResponse) Size() (n int) {
	var l int
	_ = l
	if m.PageNum != 0 {
		n += 1 + sovOpenapi(uint64(m.PageNum))
	}
	if m.PageSize != 0 {
		n += 1 + sovOpenapi(uint64(m.PageSize))
	}
	if m.TotalCount != 0 {
		n += 1 + sovOpenapi(uint64(m.TotalCount))
	}
	return n
}

func (m *TokenResponse) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovOpenapi(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovOpenapi(uint64(l))
	}
	if m.Expire != 0 {
		n += 1 + sovOpenapi(uint64(m.Expire))
	}
	return n
}

func (m *ProjectUpdateResponse) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovOpenapi(uint64(l))
	}
	if m.Result != 0 {
		n += 1 + sovOpenapi(uint64(m.Result))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovOpenapi(uint64(l))
	}
	return n
}

func (m *ListProjectResponse) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovOpenapi(uint64(l))
	}
	if len(m.ProjectInfos) > 0 {
		for _, e := range m.ProjectInfos {
			l = e.Size()
			n += 1 + l + sovOpenapi(uint64(l))
		}
	}
	if m.Page != nil {
		l = m.Page.Size()
		n += 2 + l + sovOpenapi(uint64(l))
	}
	return n
}

func (m *BudgetUpdateResponse) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovOpenapi(uint64(l))
	}
	if m.Result != 0 {
		n += 1 + sovOpenapi(uint64(m.Result))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovOpenapi(uint64(l))
	}
	return n
}

func (m *BudgetReviseResponse) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovOpenapi(uint64(l))
	}
	if m.Result != 0 {
		n += 1 + sovOpenapi(uint64(m.Result))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovOpenapi(uint64(l))
	}
	return n
}

func (m *ListBudgetResponse) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovOpenapi(uint64(l))
	}
	if len(m.ProjectInfos) > 0 {
		for _, e := range m.ProjectInfos {
			l = e.Size()
			n += 1 + l + sovOpenapi(uint64(l))
		}
	}
	if m.Page != nil {
		l = m.Page.Size()
		n += 2 + l + sovOpenapi(uint64(l))
	}
	return n
}

func (m *EmployeeUpdateResponse) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovOpenapi(uint64(l))
	}
	if m.Result != 0 {
		n += 1 + sovOpenapi(uint64(m.Result))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovOpenapi(uint64(l))
	}
	return n
}

func (m *ListEmployeeResponse) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovOpenapi(uint64(l))
	}
	if len(m.EmpInfos) > 0 {
		for _, e := range m.EmpInfos {
			l = e.Size()
			n += 1 + l + sovOpenapi(uint64(l))
		}
	}
	if m.Page != nil {
		l = m.Page.Size()
		n += 2 + l + sovOpenapi(uint64(l))
	}
	return n
}

func (m *DepartmentUpdateResponse) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovOpenapi(uint64(l))
	}
	if m.Result != 0 {
		n += 1 + sovOpenapi(uint64(m.Result))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovOpenapi(uint64(l))
	}
	return n
}

func (m *ListDepartmentResponse) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovOpenapi(uint64(l))
	}
	if len(m.DepInfos) > 0 {
		for _, e := range m.DepInfos {
			l = e.Size()
			n += 1 + l + sovOpenapi(uint64(l))
		}
	}
	if m.Page != nil {
		l = m.Page.Size()
		n += 2 + l + sovOpenapi(uint64(l))
	}
	return n
}

func (m *FlushBeginResponse) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovOpenapi(uint64(l))
	}
	if m.Result != 0 {
		n += 1 + sovOpenapi(uint64(m.Result))
	}
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovOpenapi(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovOpenapi(uint64(l))
	}
	return n
}

func (m *FlushEndResponse) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovOpenapi(uint64(l))
	}
	if m.Result != 0 {
		n += 1 + sovOpenapi(uint64(m.Result))
	}
	l = len(m.TaskId)
	if l > 0 {
		n += 1 + l + sovOpenapi(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovOpenapi(uint64(l))
	}
	return n
}

func (m *ReportCountResponse) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovOpenapi(uint64(l))
	}
	if len(m.RptItems) > 0 {
		for _, e := range m.RptItems {
			l = e.Size()
			n += 1 + l + sovOpenapi(uint64(l))
		}
	}
	return n
}

func (m *ReportDetailResponse) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovOpenapi(uint64(l))
	}
	if len(m.RptItems) > 0 {
		for _, e := range m.RptItems {
			l = e.Size()
			n += 1 + l + sovOpenapi(uint64(l))
		}
	}
	return n
}

func sovOpenapi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozOpenapi(x uint64) (n int) {
	return sovOpenapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProjectInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpenapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProjectInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProjectInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApproverIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApproverIds = append(m.ApproverIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 100:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (PrjStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 109:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, &TagItem{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOpenapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOpenapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TagItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpenapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TagItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TagItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			m.Tag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tag |= (ExtraTag(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Val", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Val = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOpenapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOpenapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BudgetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpenapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BudgetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BudgetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Available", wireType)
			}
			m.Available = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Available |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApproverId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApproverId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tp", wireType)
			}
			m.Tp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tp |= (BudgetType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 102:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TpId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TpId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 103:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 104:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubprjId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubprjId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 105:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Itemcode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Itemcode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 106:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubprjName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubprjName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 107:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Belong", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Belong = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 108:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TpName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TpName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 109:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, &TagItem{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOpenapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOpenapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BudgetReviseItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpenapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BudgetReviseItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BudgetReviseItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tp", wireType)
			}
			m.Tp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tp |= (BudgetType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TpId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TpId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubprjId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubprjId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ItemCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOpenapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOpenapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EmployeeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpenapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmployeeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmployeeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nationality", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nationality = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdInfos = append(m.IdInfos, &IdInfo{})
			if err := m.IdInfos[len(m.IdInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (EmpStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApproverIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApproverIds = append(m.ApproverIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Passwd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Passwd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mobile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mobile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 101:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 102:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			m.Gender = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gender |= (Gender(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 104:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnLastname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnLastname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 105:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnFirstname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnFirstname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 106:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CnLastname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CnLastname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 107:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CnFirstname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CnFirstname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 108:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Birthday", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Birthday = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 109:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, &TagItem{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOpenapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOpenapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IdInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpenapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IdInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IdInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdType", wireType)
			}
			m.IdType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdType |= (IdType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdNumber", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdNumber = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Idindate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Idindate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Idcountry", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Idcountry = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOpenapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOpenapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DepartmentInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpenapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DepartmentInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DepartmentInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EnName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuperDepid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SuperDepid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApproverIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApproverIds = append(m.ApproverIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (DepStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 109:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tags = append(m.Tags, &TagItem{})
			if err := m.Tags[len(m.Tags)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOpenapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOpenapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReportCountItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpenapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportCountItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportCountItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (DataStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			m.Tag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tag |= (DataTag(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (DataType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOpenapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOpenapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReportDetailItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpenapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportDetailItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportDetailItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (DataStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tag", wireType)
			}
			m.Tag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tag |= (DataTag(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (DataType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ids = append(m.Ids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOpenapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOpenapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RequestHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpenapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RequestHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RequestHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TraceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 1000:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtJson", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExtJson = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOpenapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOpenapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpenapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageNum", wireType)
			}
			m.PageNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOpenapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOpenapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpenapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &RequestHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOpenapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOpenapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProjectUpdateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpenapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProjectUpdateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProjectUpdateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &RequestHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectInfos = append(m.ProjectInfos, &ProjectInfo{})
			if err := m.ProjectInfos[len(m.ProjectInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOpenapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOpenapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListProjectRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpenapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListProjectRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListProjectRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &RequestHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrjIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrjIds = append(m.PrjIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 110:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Page == nil {
				m.Page = &PageRequest{}
			}
			if err := m.Page.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOpenapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOpenapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BudgetUpdateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpenapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BudgetUpdateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BudgetUpdateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &RequestHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BudgetInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BudgetInfos = append(m.BudgetInfos, &BudgetInfo{})
			if err := m.BudgetInfos[len(m.BudgetInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOpenapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOpenapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BudgetReviseRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpenapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BudgetReviseRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BudgetReviseRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &RequestHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BudgetReviseItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BudgetReviseItems = append(m.BudgetReviseItems, &BudgetReviseItem{})
			if err := m.BudgetReviseItems[len(m.BudgetReviseItems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOpenapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOpenapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListBudgetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpenapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListBudgetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListBudgetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &RequestHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tp", wireType)
			}
			m.Tp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tp |= (BudgetType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TpIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TpIds = append(m.TpIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 100:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Itemcodes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Itemcodes = append(m.Itemcodes, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 110:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Page == nil {
				m.Page = &PageRequest{}
			}
			if err := m.Page.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOpenapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOpenapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EmployeeUpdateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpenapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmployeeUpdateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmployeeUpdateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &RequestHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmployeeInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmployeeInfos = append(m.EmployeeInfos, &EmployeeInfo{})
			if err := m.EmployeeInfos[len(m.EmployeeInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOpenapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOpenapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListEmployeeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpenapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListEmployeeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListEmployeeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &RequestHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ids = append(m.Ids, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 110:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Page == nil {
				m.Page = &PageRequest{}
			}
			if err := m.Page.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOpenapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOpenapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DepartmentUpdateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpenapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DepartmentUpdateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DepartmentUpdateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &RequestHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepartmentInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepartmentInfos = append(m.DepartmentInfos, &DepartmentInfo{})
			if err := m.DepartmentInfos[len(m.DepartmentInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOpenapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOpenapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListDepartmentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpenapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListDepartmentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListDepartmentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &RequestHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepIds", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepIds = append(m.DepIds, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 110:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Page == nil {
				m.Page = &PageRequest{}
			}
			if err := m.Page.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOpenapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOpenapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlushBeginRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpenapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlushBeginRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlushBeginRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &RequestHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOpenapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOpenapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlushEndRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpenapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlushEndRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlushEndRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &RequestHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOpenapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOpenapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReportCountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpenapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportCountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportCountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &RequestHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOpenapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOpenapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReportDetailRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpenapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportDetailRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportDetailRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &RequestHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v DataType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOpenapi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (DataType(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Types = append(m.Types, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOpenapi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthOpenapi
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v DataType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOpenapi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (DataType(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Types = append(m.Types, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOpenapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOpenapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResponseHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpenapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResponseHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResponseHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TraceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TraceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalTime", wireType)
			}
			m.TotalTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalTime |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= (Status(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOpenapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOpenapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpenapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageNum", wireType)
			}
			m.PageNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOpenapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOpenapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpenapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &ResponseHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expire", wireType)
			}
			m.Expire = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expire |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOpenapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOpenapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProjectUpdateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpenapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProjectUpdateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProjectUpdateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &ResponseHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (ActResult(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOpenapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOpenapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListProjectResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpenapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListProjectResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListProjectResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &ResponseHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectInfos = append(m.ProjectInfos, &ProjectInfo{})
			if err := m.ProjectInfos[len(m.ProjectInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 110:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Page == nil {
				m.Page = &PageResponse{}
			}
			if err := m.Page.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOpenapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOpenapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BudgetUpdateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpenapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BudgetUpdateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BudgetUpdateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &ResponseHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (ActResult(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOpenapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOpenapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BudgetReviseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpenapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BudgetReviseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BudgetReviseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &ResponseHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (ActResult(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOpenapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOpenapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListBudgetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpenapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListBudgetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListBudgetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &ResponseHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProjectInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProjectInfos = append(m.ProjectInfos, &ProjectInfo{})
			if err := m.ProjectInfos[len(m.ProjectInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 110:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Page == nil {
				m.Page = &PageResponse{}
			}
			if err := m.Page.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOpenapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOpenapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EmployeeUpdateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpenapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmployeeUpdateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmployeeUpdateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &ResponseHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (ActResult(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOpenapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOpenapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListEmployeeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpenapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListEmployeeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListEmployeeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &ResponseHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmpInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmpInfos = append(m.EmpInfos, &EmployeeInfo{})
			if err := m.EmpInfos[len(m.EmpInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 110:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Page == nil {
				m.Page = &PageResponse{}
			}
			if err := m.Page.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOpenapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOpenapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DepartmentUpdateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpenapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DepartmentUpdateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DepartmentUpdateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &ResponseHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (ActResult(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOpenapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOpenapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListDepartmentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpenapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListDepartmentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListDepartmentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &ResponseHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DepInfos = append(m.DepInfos, &DepartmentInfo{})
			if err := m.DepInfos[len(m.DepInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 110:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Page == nil {
				m.Page = &PageResponse{}
			}
			if err := m.Page.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOpenapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOpenapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlushBeginResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpenapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlushBeginResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlushBeginResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &ResponseHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (ActResult(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOpenapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOpenapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FlushEndResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpenapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FlushEndResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FlushEndResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &ResponseHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (ActResult(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TaskId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TaskId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOpenapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOpenapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReportCountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpenapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportCountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportCountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &ResponseHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RptItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RptItems = append(m.RptItems, &ReportCountItem{})
			if err := m.RptItems[len(m.RptItems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOpenapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOpenapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReportDetailResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOpenapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReportDetailResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReportDetailResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &ResponseHeader{}
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RptItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOpenapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RptItems = append(m.RptItems, &ReportDetailItem{})
			if err := m.RptItems[len(m.RptItems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOpenapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOpenapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOpenapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOpenapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOpenapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthOpenapi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowOpenapi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipOpenapi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthOpenapi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOpenapi   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("openapi.proto", fileDescriptorOpenapi) }

var fileDescriptorOpenapi = []byte{
	// 2770 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x5a, 0x4d, 0x6f, 0xe3, 0xc6,
	0x19, 0x0e, 0x45, 0x7d, 0xbe, 0xf2, 0x07, 0x4d, 0x7f, 0xc9, 0xf6, 0xae, 0xd7, 0x61, 0x92, 0xc6,
	0x55, 0x81, 0x18, 0xd8, 0xb6, 0x01, 0x1a, 0x14, 0x41, 0x65, 0x89, 0xde, 0x55, 0x62, 0x4b, 0x02,
	0x45, 0x25, 0xd9, 0xa0, 0x00, 0x41, 0x99, 0xb3, 0x32, 0xd7, 0x12, 0xc5, 0x92, 0xb4, 0xb3, 0x4e,
	0x11, 0x14, 0x29, 0xb0, 0x09, 0xd2, 0x53, 0x81, 0x5e, 0x8a, 0x20, 0x68, 0x6e, 0x39, 0xb4, 0xb9,
	0xf6, 0x17, 0xf4, 0xd0, 0x02, 0x2d, 0x8a, 0x02, 0xfd, 0x01, 0x2d, 0x36, 0x3d, 0x14, 0xbd, 0xf6,
	0x0f, 0x14, 0xf3, 0x41, 0x72, 0x48, 0xc9, 0x5b, 0xaf, 0x5c, 0x74, 0x73, 0xc9, 0x7a, 0x9e, 0x19,
	0xbe, 0x1f, 0xcf, 0xbc, 0x7c, 0xe7, 0xe1, 0x28, 0x30, 0x3f, 0x76, 0x91, 0x63, 0xba, 0xf6, 0x2b,
	0xae, 0x37, 0x0e, 0xc6, 0x72, 0x81, 0x0d, 0x37, 0x6f, 0x0c, 0xc6, 0xe3, 0xc1, 0x10, 0xed, 0x99,
	0xae, 0xbd, 0x67, 0x3a, 0xce, 0x38, 0x30, 0x03, 0x7b, 0xec, 0xf8, 0x74, 0x99, 0xf2, 0x3b, 0x01,
	0xca, 0x1d, 0x6f, 0xfc, 0x00, 0x1d, 0x07, 0x4d, 0xe7, 0xfe, 0x58, 0x5e, 0x80, 0x8c, 0x6d, 0x55,
	0x32, 0x3b, 0xc2, 0x6e, 0x49, 0xcb, 0xd8, 0x96, 0x2c, 0x43, 0xd6, 0x31, 0x47, 0xa8, 0x22, 0x12,
	0x84, 0xfc, 0x2d, 0x6f, 0x41, 0xc9, 0x35, 0x3d, 0xe4, 0x04, 0x86, 0x6d, 0x55, 0xb2, 0x64, 0xa2,
	0x48, 0x81, 0xa6, 0x25, 0x3f, 0x0f, 0x73, 0xa6, 0xeb, 0x7a, 0xe3, 0x73, 0xe4, 0x19, 0xb6, 0xe5,
	0x57, 0x72, 0x3b, 0xe2, 0x6e, 0x49, 0x2b, 0x87, 0x58, 0xd3, 0xf2, 0xe5, 0x2a, 0xe4, 0xfd, 0xc0,
	0x0c, 0xce, 0xfc, 0x8a, 0xb5, 0x23, 0xec, 0x2e, 0xdc, 0x96, 0x5f, 0x09, 0x43, 0xef, 0x78, 0x0f,
	0xba, 0x64, 0x46, 0x63, 0x2b, 0xe4, 0x17, 0x21, 0x1b, 0x98, 0x03, 0xbf, 0x32, 0xda, 0x11, 0x77,
	0xcb, 0xb7, 0xa5, 0x68, 0xa5, 0x6e, 0x0e, 0x9a, 0x01, 0x1a, 0x69, 0x64, 0x56, 0xf9, 0x01, 0x14,
	0x18, 0x20, 0xbf, 0x00, 0x62, 0x60, 0x0e, 0x2a, 0x02, 0xb1, 0xbc, 0x14, 0xad, 0x57, 0x1f, 0x06,
	0x9e, 0xa9, 0x9b, 0x03, 0x0d, 0xcf, 0xca, 0x12, 0x88, 0xe7, 0xe6, 0x90, 0xa5, 0x89, 0xff, 0x54,
	0x3e, 0x17, 0x01, 0xf6, 0xcf, 0xac, 0x01, 0xe2, 0x69, 0x10, 0x26, 0x68, 0xc8, 0x70, 0x34, 0xac,
	0x40, 0x2e, 0x18, 0x07, 0xe6, 0x90, 0x70, 0x23, 0x6a, 0x74, 0x20, 0xdf, 0x80, 0x92, 0x79, 0x6e,
	0xda, 0x43, 0xb3, 0x3f, 0x44, 0x84, 0x1c, 0x51, 0x8b, 0x01, 0xf9, 0x16, 0x94, 0x39, 0x76, 0x2a,
	0x39, 0x62, 0x0e, 0x62, 0x72, 0xe4, 0xb5, 0x88, 0x9b, 0xfc, 0x8e, 0xb0, 0x5b, 0x8c, 0x78, 0x78,
	0x01, 0x32, 0x81, 0x5b, 0x29, 0x90, 0xac, 0x96, 0xa3, 0xac, 0x68, 0xc4, 0xfa, 0x85, 0x8b, 0xb4,
	0x4c, 0xe0, 0xca, 0xcb, 0x90, 0x0b, 0x5c, 0x6c, 0xf7, 0x3e, 0x0d, 0x33, 0x70, 0x9b, 0x96, 0xbc,
	0x0a, 0x79, 0x0b, 0x11, 0x74, 0x40, 0xd0, 0x9c, 0x85, 0x30, 0xbc, 0x05, 0x25, 0xff, 0xac, 0xef,
	0x7a, 0x0f, 0xf0, 0xcc, 0x09, 0xdd, 0x44, 0x0a, 0x34, 0x2d, 0x79, 0x13, 0x8a, 0x76, 0x80, 0x46,
	0xc7, 0x63, 0x0b, 0x55, 0x6c, 0x3a, 0x17, 0x8e, 0x71, 0x0a, 0xec, 0x41, 0xc2, 0xc8, 0x03, 0x9a,
	0x02, 0x85, 0x5a, 0x98, 0x97, 0x35, 0xc8, 0xf7, 0xd1, 0x70, 0xec, 0x0c, 0x2a, 0xa7, 0x64, 0x8e,
	0x8d, 0xe4, 0x75, 0x28, 0x04, 0x2e, 0x7d, 0x68, 0x48, 0x27, 0x02, 0x97, 0x3c, 0x70, 0xb5, 0x3d,
	0xfe, 0x52, 0x00, 0x89, 0xe6, 0xab, 0xa1, 0x73, 0xdb, 0x47, 0x64, 0xb7, 0xd3, 0xfb, 0x44, 0x69,
	0xca, 0x5c, 0x91, 0x26, 0x91, 0xa3, 0x29, 0xc1, 0x47, 0x36, 0xc5, 0xc7, 0x16, 0x94, 0x70, 0xfe,
	0x06, 0x21, 0x24, 0x17, 0x13, 0x52, 0xc7, 0x84, 0x44, 0x75, 0x90, 0xe7, 0xea, 0x40, 0xf9, 0x73,
	0x16, 0xe6, 0xd4, 0x91, 0x3b, 0x1c, 0x5f, 0x20, 0x74, 0xe5, 0x92, 0x5a, 0x87, 0x02, 0x72, 0x0c,
	0xee, 0x85, 0xcb, 0x23, 0x87, 0x50, 0xb4, 0x03, 0x65, 0x87, 0xbc, 0xb7, 0xe6, 0xd0, 0x0e, 0x2e,
	0x58, 0x7c, 0x3c, 0xc4, 0x6d, 0x73, 0x8e, 0xdf, 0xe6, 0x2a, 0x14, 0x6d, 0xcb, 0xb0, 0x9d, 0xfb,
	0x63, 0x5c, 0x51, 0x98, 0xdf, 0xc5, 0x88, 0x96, 0xa6, 0x85, 0x03, 0xd3, 0x0a, 0x36, 0xf9, 0x97,
	0x7f, 0x2f, 0x8b, 0xa9, 0xf7, 0x52, 0x1d, 0xb9, 0xa9, 0xf7, 0x32, 0xfd, 0x9a, 0x97, 0x26, 0x5f,
	0xf3, 0x15, 0xc8, 0xa1, 0x91, 0x69, 0x0f, 0x2b, 0x40, 0x03, 0x22, 0x03, 0x5c, 0x1d, 0xae, 0xe9,
	0xfb, 0xef, 0x59, 0x95, 0x32, 0xcd, 0x90, 0x8e, 0x30, 0x3e, 0x1a, 0xf7, 0xed, 0x21, 0x22, 0x4d,
	0xa1, 0xa4, 0xb1, 0x11, 0xb6, 0x32, 0x44, 0xe7, 0x68, 0x58, 0x41, 0x3b, 0xc2, 0x6e, 0x4e, 0xa3,
	0x03, 0xf9, 0x65, 0xc8, 0x0f, 0x90, 0x63, 0x21, 0x8f, 0x94, 0xfa, 0x02, 0x97, 0xd4, 0x1d, 0x02,
	0x6b, 0x6c, 0x1a, 0x57, 0x2b, 0x72, 0x8c, 0xa1, 0xe9, 0x07, 0x84, 0x55, 0x5a, 0xe8, 0x80, 0x9c,
	0x43, 0x86, 0xe0, 0x44, 0x90, 0x63, 0xdc, 0xb7, 0x3d, 0xb6, 0x82, 0x96, 0x7b, 0x19, 0x39, 0x07,
	0x21, 0x84, 0x6d, 0x1c, 0x73, 0x36, 0x58, 0xc5, 0x1f, 0x27, 0x6c, 0x1c, 0xf3, 0x36, 0x68, 0xdd,
	0x97, 0x8f, 0x39, 0x1b, 0x9b, 0x50, 0xec, 0xdb, 0x5e, 0x70, 0x62, 0x99, 0x17, 0xac, 0xfa, 0xa3,
	0xf1, 0x15, 0xeb, 0xff, 0x13, 0x01, 0xf2, 0x74, 0xc7, 0xe4, 0x5d, 0x28, 0xd8, 0x96, 0x11, 0x5c,
	0xb8, 0x88, 0xf5, 0x39, 0x7e, 0x4f, 0x49, 0x99, 0xe7, 0x6d, 0xf2, 0x2f, 0x29, 0x5c, 0xcb, 0x70,
	0xce, 0x46, 0x7d, 0xe4, 0xb1, 0x4a, 0x2b, 0xda, 0x56, 0x8b, 0x8c, 0xc9, 0x5b, 0x6e, 0xd9, 0x8e,
	0x65, 0x06, 0x61, 0xb9, 0x45, 0x63, 0xdc, 0xc6, 0x6c, 0xeb, 0x78, 0x7c, 0xe6, 0x04, 0x5e, 0x58,
	0x6e, 0x31, 0xa0, 0x7c, 0x25, 0xc0, 0x42, 0x03, 0xb9, 0xa6, 0x17, 0x8c, 0x70, 0xd7, 0xbf, 0xea,
	0xc1, 0xc1, 0x95, 0x77, 0x36, 0x51, 0xde, 0xa4, 0xa7, 0xb8, 0xc8, 0x33, 0x2c, 0xe4, 0xc6, 0x6d,
	0x91, 0x40, 0x0d, 0x8c, 0x4c, 0x94, 0x5b, 0xe1, 0x49, 0xa7, 0x4a, 0xba, 0x7a, 0x1b, 0xc8, 0x9d,
	0xe9, 0x54, 0xf9, 0x5c, 0x80, 0x45, 0x0d, 0xb9, 0x63, 0x2f, 0xa8, 0xe3, 0xbc, 0x49, 0xc3, 0xf9,
	0x56, 0xe4, 0x45, 0x48, 0x35, 0x99, 0x86, 0x19, 0x98, 0x29, 0x37, 0x0a, 0x3d, 0x8b, 0x68, 0x3b,
	0x92, 0x12, 0x2b, 0xa3, 0xa3, 0xe8, 0x25, 0xc8, 0x92, 0x8d, 0x14, 0x53, 0x07, 0x16, 0x59, 0x84,
	0xb7, 0x92, 0x4c, 0xe3, 0xd7, 0x80, 0x90, 0x4f, 0x88, 0xcb, 0x69, 0x74, 0xa0, 0x7c, 0x26, 0x80,
	0x44, 0x23, 0x6c, 0xa0, 0xc0, 0xb4, 0x87, 0xcf, 0x34, 0x44, 0x09, 0x44, 0xbc, 0x35, 0x59, 0xb2,
	0x35, 0xf8, 0x4f, 0xe5, 0x23, 0x01, 0xe6, 0x35, 0xf4, 0xa3, 0x33, 0xe4, 0x07, 0x77, 0x91, 0x89,
	0x5f, 0xc7, 0x0d, 0x28, 0x06, 0x9e, 0x79, 0x8c, 0x8c, 0xa8, 0x15, 0x16, 0xc8, 0xb8, 0x69, 0xe1,
	0xc7, 0x4f, 0xd1, 0x45, 0x78, 0x26, 0x9f, 0xa2, 0x0b, 0x72, 0x16, 0x8e, 0xcf, 0xbc, 0xe3, 0xa8,
	0x5a, 0xe8, 0x88, 0x36, 0xdc, 0x53, 0xe4, 0x84, 0x9d, 0x8e, 0x0c, 0x70, 0x35, 0xa3, 0x87, 0x81,
	0xf1, 0xc0, 0x1f, 0x3b, 0x95, 0x7f, 0x16, 0xa8, 0x6d, 0xf4, 0x30, 0x78, 0xc3, 0x1f, 0x3b, 0x8a,
	0x0a, 0xe5, 0x8e, 0x39, 0x40, 0x2c, 0x16, 0x1c, 0x85, 0x6b, 0x0e, 0x10, 0x7e, 0x2f, 0x48, 0x14,
	0x39, 0xad, 0x80, 0xc7, 0xad, 0xb3, 0x11, 0xd5, 0x36, 0x03, 0x64, 0xf8, 0xf6, 0xfb, 0xb4, 0x35,
	0xe7, 0x34, 0xb2, 0xb6, 0x6b, 0xbf, 0x8f, 0x94, 0xd7, 0x61, 0x4e, 0xc7, 0xbe, 0x42, 0x3b, 0xaf,
	0x40, 0xfe, 0x84, 0xe4, 0x45, 0xac, 0x94, 0x6f, 0xaf, 0x45, 0xd4, 0x24, 0xb2, 0xd6, 0xd8, 0x2a,
	0xe5, 0x53, 0x01, 0x56, 0x98, 0xd8, 0xea, 0xb9, 0xf8, 0x35, 0x9b, 0xd1, 0x90, 0xfc, 0x3d, 0x98,
	0x77, 0xa9, 0x1d, 0xd6, 0xda, 0x33, 0xa4, 0x90, 0x57, 0x38, 0x21, 0x15, 0x49, 0x3a, 0x6d, 0xce,
	0x8d, 0x07, 0x3e, 0x39, 0x85, 0x4d, 0xff, 0x34, 0x3e, 0xfe, 0xf2, 0x78, 0xd8, 0xb4, 0x94, 0x8f,
	0x05, 0x90, 0x0f, 0x6d, 0x3f, 0x60, 0x8f, 0xce, 0x1a, 0xda, 0x3a, 0x14, 0xe8, 0x21, 0x4a, 0x83,
	0xc2, 0x0d, 0x1e, 0x1f, 0xa1, 0xbe, 0xbc, 0x0b, 0x59, 0x4c, 0x64, 0xc5, 0x21, 0x66, 0xb8, 0x50,
	0xe3, 0x8d, 0xd1, 0xc8, 0x0a, 0xe5, 0x03, 0x58, 0xa6, 0x27, 0xf6, 0xf5, 0x48, 0x7a, 0x15, 0xe6,
	0xfa, 0xc4, 0x4c, 0x82, 0xa3, 0xb4, 0x2a, 0x20, 0x14, 0x95, 0xfb, 0xd1, 0xdf, 0xbe, 0xf2, 0x73,
	0x21, 0xf4, 0x4f, 0x85, 0xc6, 0xac, 0xfe, 0x9b, 0xb0, 0xcc, 0xfc, 0x7b, 0xc4, 0x8e, 0x81, 0x15,
	0x43, 0x18, 0xc6, 0x46, 0x2a, 0x8c, 0x58, 0xd3, 0x68, 0x4b, 0xfd, 0x14, 0xe2, 0x2b, 0xbf, 0x17,
	0x60, 0x09, 0xef, 0x4d, 0xb8, 0x76, 0xb6, 0x80, 0xae, 0x24, 0x8e, 0x56, 0x21, 0x4f, 0xc4, 0x91,
	0x5f, 0x11, 0xc9, 0xf6, 0xe5, 0xb0, 0x3a, 0xf2, 0xc9, 0x79, 0xc0, 0x14, 0x20, 0x96, 0xed, 0x22,
	0x39, 0x0f, 0x42, 0xe0, 0x29, 0xf6, 0xf6, 0x57, 0x02, 0xac, 0x86, 0xb2, 0xe8, 0x7a, 0xdb, 0xfb,
	0x7d, 0x58, 0x40, 0xcc, 0x50, 0x62, 0x83, 0x57, 0x79, 0xd5, 0x12, 0xc9, 0x2f, 0x6d, 0x1e, 0x71,
	0xa3, 0x27, 0xbc, 0x06, 0x1f, 0x0a, 0xb0, 0x8c, 0xa9, 0x0e, 0x1f, 0x9e, 0x35, 0x3c, 0xd6, 0x0d,
	0x33, 0x51, 0x37, 0x7c, 0x0a, 0x92, 0xbe, 0x10, 0x60, 0x3d, 0x3e, 0x5e, 0xaf, 0x47, 0xd3, 0x3e,
	0x48, 0x56, 0x64, 0x2a, 0x41, 0xd4, 0x3a, 0x7f, 0x40, 0x72, 0x47, 0xb9, 0xb6, 0x68, 0x25, 0xc6,
	0x4f, 0x20, 0xeb, 0x67, 0x02, 0xac, 0x62, 0xb2, 0x62, 0x03, 0xd7, 0x68, 0x1b, 0x54, 0xbe, 0x46,
	0x6d, 0x83, 0xe8, 0xd7, 0xa7, 0x61, 0xed, 0x87, 0xb0, 0x74, 0x30, 0x3c, 0xf3, 0x4f, 0xf6, 0xd1,
	0xc0, 0x76, 0xae, 0x11, 0x47, 0x98, 0x6a, 0x26, 0x91, 0xea, 0xbb, 0xb0, 0x48, 0xac, 0xab, 0x8e,
	0xf5, 0x3f, 0xb7, 0xdd, 0x00, 0x99, 0xd3, 0x19, 0xb3, 0x9e, 0x2e, 0x0e, 0x2c, 0xf3, 0x5a, 0x60,
	0xd6, 0x28, 0x5f, 0x86, 0x1c, 0x3e, 0xce, 0xe9, 0x3e, 0x4c, 0x3d, 0xee, 0xe9, 0xbc, 0xf2, 0x48,
	0x80, 0x05, 0x0d, 0xf9, 0xee, 0xd8, 0xf1, 0xd1, 0x7f, 0x3f, 0xde, 0x6f, 0x02, 0x90, 0x0f, 0x23,
	0x23, 0xb0, 0xd9, 0x47, 0x8f, 0xa8, 0x95, 0x08, 0xa2, 0xdb, 0x23, 0x84, 0x05, 0x3d, 0x13, 0x2d,
	0x90, 0x52, 0xb4, 0x29, 0xc1, 0x22, 0x81, 0x38, 0xf2, 0x07, 0xec, 0xe3, 0x01, 0xff, 0xa9, 0x0c,
	0x60, 0x8e, 0x16, 0x03, 0x0d, 0x65, 0xd6, 0xd3, 0x1d, 0x8b, 0x50, 0x1a, 0x21, 0x15, 0x5a, 0x22,
	0x99, 0xa6, 0x41, 0x93, 0x7d, 0x51, 0x1c, 0x98, 0x67, 0xc7, 0x3f, 0xf3, 0xb4, 0x97, 0xa2, 0x76,
	0x9d, 0xa3, 0x96, 0xe7, 0x25, 0xe2, 0x36, 0x52, 0x2e, 0x19, 0x5e, 0xb9, 0xac, 0x41, 0x1e, 0x3d,
	0x74, 0x6d, 0x0f, 0xb1, 0x9b, 0x04, 0x36, 0xc2, 0xf2, 0x69, 0x35, 0x25, 0x17, 0x66, 0x75, 0x5c,
	0x85, 0xbc, 0x87, 0xfc, 0xb3, 0x61, 0xc0, 0xda, 0x7f, 0x2c, 0x8e, 0x6b, 0xf8, 0xa8, 0xc7, 0x33,
	0x1a, 0x5b, 0x11, 0x32, 0x2c, 0xc6, 0x0c, 0x7f, 0xc9, 0x7a, 0x62, 0x24, 0x0d, 0x66, 0x0d, 0xe3,
	0x1a, 0xba, 0xe5, 0x9b, 0x89, 0x3e, 0xb0, 0x9a, 0xea, 0x03, 0xd4, 0x1b, 0x6b, 0x04, 0x8f, 0x04,
	0x58, 0x49, 0x0a, 0x88, 0x67, 0x43, 0x5b, 0x1c, 0x47, 0x28, 0x24, 0x9e, 0x4d, 0x1c, 0xbf, 0x61,
	0xca, 0x2e, 0x8c, 0xe5, 0xeb, 0xbd, 0x7b, 0x1f, 0x0b, 0xb0, 0x96, 0x56, 0x08, 0xcf, 0x86, 0xb7,
	0x2f, 0x04, 0x58, 0x49, 0x4a, 0x81, 0x59, 0xe3, 0xb8, 0x0d, 0x25, 0x34, 0x72, 0xaf, 0x22, 0x53,
	0x8a, 0x68, 0xe4, 0x3e, 0x35, 0x65, 0x9f, 0x08, 0x50, 0x99, 0xd4, 0x0b, 0xcf, 0x86, 0xb4, 0x5f,
	0x0b, 0xb0, 0x96, 0x96, 0x04, 0xb3, 0x46, 0xf2, 0x1d, 0x28, 0x11, 0x51, 0x70, 0x15, 0xd1, 0x52,
	0xc4, 0x7a, 0xe1, 0x69, 0x89, 0xfb, 0x4c, 0x00, 0x99, 0xd7, 0x0c, 0xff, 0x0f, 0xca, 0x2e, 0x13,
	0x53, 0x21, 0x97, 0xd9, 0x98, 0xcb, 0x4f, 0x05, 0x90, 0x62, 0xd1, 0xf1, 0x35, 0x0b, 0xee, 0x83,
	0x50, 0x6e, 0x30, 0xd1, 0x32, 0x6b, 0x78, 0xdf, 0x85, 0x92, 0xe7, 0x06, 0x89, 0x8f, 0xa3, 0x0a,
	0xf7, 0x4c, 0xe2, 0xfa, 0x45, 0x2b, 0x7a, 0x6e, 0x40, 0x3f, 0x89, 0x7e, 0x02, 0x2b, 0x49, 0xb5,
	0x33, 0xab, 0xff, 0x57, 0x27, 0xfd, 0x6f, 0xa4, 0xfc, 0xc7, 0x97, 0x2b, 0x71, 0x00, 0xd5, 0x47,
	0x02, 0xe4, 0xbb, 0xa1, 0x26, 0x99, 0xeb, 0xea, 0x35, 0xbd, 0xd7, 0x35, 0xd4, 0xa3, 0x8e, 0x7e,
	0x4f, 0x7a, 0x4e, 0x96, 0x61, 0x81, 0x21, 0xdd, 0x5e, 0xbd, 0xae, 0x76, 0xbb, 0x92, 0x20, 0x2f,
	0x42, 0x99, 0x61, 0x07, 0xb5, 0xe6, 0xa1, 0x94, 0xe1, 0x1f, 0xd3, 0xb4, 0xb6, 0x26, 0x89, 0xf2,
	0x3a, 0x2c, 0x33, 0xa4, 0xd7, 0xaa, 0xf5, 0xf4, 0xbb, 0x6d, 0xad, 0xf9, 0xae, 0xda, 0x90, 0xb2,
	0xf2, 0x06, 0xac, 0xb2, 0x89, 0x56, 0x5b, 0x37, 0x9a, 0x2d, 0xa3, 0xab, 0x6a, 0x6f, 0x35, 0xeb,
	0xaa, 0x94, 0xab, 0xfe, 0x18, 0x4a, 0xd1, 0x3e, 0xca, 0x2b, 0x20, 0xd5, 0xea, 0xba, 0xa1, 0xa9,
	0xdd, 0xde, 0xa1, 0x1e, 0x45, 0xb3, 0x06, 0x32, 0x87, 0xc6, 0x11, 0x2d, 0xc3, 0x22, 0x87, 0xb3,
	0xa8, 0x52, 0x26, 0x58, 0x64, 0xab, 0xb0, 0xc4, 0xa3, 0xef, 0x34, 0xbb, 0x7a, 0x57, 0xca, 0x56,
	0x8f, 0xc2, 0x5f, 0x4d, 0xc8, 0x6d, 0xe3, 0x2a, 0x2c, 0xed, 0xf7, 0x1a, 0x77, 0x54, 0xdd, 0xd0,
	0xef, 0x75, 0xd4, 0xc8, 0xfd, 0x32, 0x2c, 0xf2, 0x70, 0x47, 0x7b, 0x83, 0xfa, 0xe6, 0xc1, 0x86,
	0xda, 0x91, 0x32, 0xd5, 0x37, 0xa1, 0x14, 0x5d, 0x35, 0xe3, 0x40, 0xd4, 0xa3, 0x8e, 0x91, 0x62,
	0x76, 0x19, 0x16, 0x39, 0xb4, 0xd5, 0xd6, 0x8e, 0xa8, 0x31, 0x0e, 0x3c, 0x6c, 0x1f, 0x1c, 0x50,
	0x63, 0xd1, 0xef, 0x49, 0xd8, 0x58, 0x47, 0x7b, 0x63, 0x8a, 0x31, 0x0e, 0x8d, 0x8d, 0x71, 0x60,
	0x57, 0x6f, 0xe3, 0xc8, 0x5e, 0x87, 0x3c, 0xbd, 0x59, 0xc6, 0xbb, 0x76, 0x47, 0x6d, 0x35, 0x54,
	0x2d, 0xb2, 0xb2, 0x04, 0xf3, 0x0c, 0x39, 0x50, 0x8f, 0x6a, 0x87, 0x2a, 0xdd, 0x6b, 0x06, 0x11,
	0x20, 0x53, 0xbd, 0x07, 0x79, 0x7a, 0x35, 0x8b, 0x57, 0x37, 0x1b, 0x49, 0x82, 0x64, 0x58, 0x08,
	0xa1, 0x66, 0xa3, 0x5e, 0xd3, 0x1a, 0x92, 0x80, 0x03, 0x0e, 0xb1, 0x4e, 0xad, 0xdb, 0xed, 0xb4,
	0x35, 0x5d, 0xca, 0xf0, 0x2b, 0xef, 0x1e, 0x61, 0x5c, 0x12, 0x71, 0x9e, 0xd1, 0x0d, 0x27, 0x7e,
	0xac, 0xa1, 0x4e, 0x23, 0x8d, 0x43, 0xe3, 0x3c, 0x39, 0x90, 0xe5, 0xf9, 0x5b, 0x01, 0x8a, 0xe1,
	0x6f, 0x65, 0xd8, 0x9b, 0xfa, 0x8e, 0xae, 0xd5, 0xf4, 0xda, 0x9d, 0xc8, 0x94, 0x04, 0x73, 0x98,
	0x1d, 0xb5, 0xa5, 0xab, 0x9a, 0xd1, 0xc4, 0x91, 0x02, 0xe4, 0x31, 0xd2, 0x6c, 0x48, 0x19, 0x79,
	0x0e, 0x8a, 0x3d, 0x63, 0x5f, 0xab, 0xb5, 0xea, 0x77, 0x25, 0x51, 0x2e, 0x42, 0xb6, 0x67, 0xec,
	0xf7, 0xa4, 0x2c, 0xae, 0x8c, 0x1e, 0xde, 0xe3, 0x9a, 0xa6, 0x1f, 0xa9, 0x2d, 0xdd, 0xa8, 0xb7,
	0xbb, 0xba, 0x94, 0xc3, 0x21, 0x24, 0xe0, 0x66, 0x43, 0xca, 0xcb, 0x0b, 0x00, 0xbd, 0xd8, 0x7e,
	0x81, 0x8e, 0xbb, 0x7a, 0xed, 0xe0, 0x00, 0x8f, 0x8b, 0xf4, 0xa1, 0xb7, 0xdb, 0xda, 0x9b, 0xc6,
	0x61, 0xbb, 0x5e, 0xd3, 0x9b, 0xed, 0x96, 0x54, 0xaa, 0x7e, 0x28, 0x40, 0x31, 0xfc, 0x40, 0x21,
	0x99, 0xd5, 0xf4, 0x5a, 0x92, 0xe4, 0x25, 0x98, 0x4f, 0x80, 0x92, 0x90, 0x84, 0x48, 0x05, 0x26,
	0x21, 0x5c, 0xa9, 0x22, 0xa1, 0x34, 0x82, 0x68, 0xcd, 0x4a, 0xd9, 0xe4, 0xc2, 0xda, 0xe1, 0xa1,
	0x94, 0xab, 0xf6, 0x01, 0xe2, 0x1b, 0x56, 0x9c, 0x32, 0x59, 0x30, 0xd9, 0x19, 0x78, 0xb8, 0xfd,
	0x26, 0xdd, 0x6b, 0x1e, 0x63, 0x2f, 0x62, 0x98, 0x05, 0x43, 0xb1, 0x0f, 0xb1, 0xfa, 0x91, 0x00,
	0x05, 0x76, 0x39, 0x1b, 0x99, 0x4a, 0x6d, 0x4f, 0x84, 0xe1, 0x27, 0xb8, 0x24, 0x6b, 0x77, 0x8c,
	0x6e, 0xed, 0x2d, 0x55, 0xca, 0xe0, 0x7e, 0x10, 0x41, 0xad, 0xb6, 0x51, 0xbf, 0x5b, 0x6b, 0xdd,
	0x51, 0x25, 0x31, 0xb9, 0x14, 0xd7, 0x43, 0x16, 0x77, 0xa4, 0x08, 0x6a, 0xb6, 0xea, 0xed, 0xa3,
	0xce, 0xa1, 0xaa, 0xab, 0x52, 0xee, 0xf6, 0x80, 0xdd, 0x85, 0x76, 0x91, 0x77, 0x6e, 0x1f, 0x23,
	0xf9, 0x6d, 0xf6, 0x69, 0x23, 0xc7, 0x07, 0x2e, 0x7f, 0x57, 0xba, 0xb9, 0x96, 0x86, 0x69, 0x33,
	0x56, 0x6e, 0xfd, 0xf4, 0xaf, 0xff, 0xf8, 0x45, 0x66, 0x43, 0x59, 0xd9, 0x1b, 0x98, 0x01, 0x7a,
	0xcf, 0xbc, 0xd8, 0x23, 0x66, 0xe8, 0x7f, 0x5f, 0x13, 0xaa, 0xb7, 0xff, 0x25, 0xc0, 0x02, 0x13,
	0x96, 0xa1, 0xaf, 0x53, 0xc8, 0x9f, 0x11, 0x91, 0x23, 0xdf, 0x4c, 0x6b, 0xcf, 0xc4, 0x65, 0xc9,
	0xe6, 0xf6, 0x65, 0xd3, 0xcc, 0xb9, 0x42, 0x9c, 0xdf, 0x50, 0xd6, 0x23, 0xe7, 0x4c, 0xb5, 0xee,
	0x51, 0xfb, 0xaf, 0x09, 0x55, 0xf9, 0x14, 0x8a, 0x0c, 0xf4, 0xe5, 0xad, 0xc8, 0xde, 0xe4, 0x4d,
	0xe9, 0xe6, 0x8d, 0xe9, 0x93, 0xcc, 0xd5, 0x8b, 0xc4, 0xd5, 0xb6, 0xb2, 0x31, 0xe1, 0x2a, 0xb4,
	0x8e, 0x93, 0xfd, 0x63, 0x06, 0xe6, 0x69, 0x43, 0x0d, 0x73, 0x3d, 0x89, 0x72, 0xbd, 0x91, 0xba,
	0xb2, 0x4b, 0xa6, 0x7a, 0xf3, 0x92, 0x59, 0xe6, 0xfe, 0x79, 0xe2, 0x7e, 0x4b, 0x59, 0x8b, 0xdc,
	0xd3, 0x5b, 0x46, 0x2e, 0xd1, 0x13, 0xac, 0x13, 0xf0, 0x77, 0xca, 0x84, 0xa7, 0xc4, 0x3d, 0xe8,
	0x84, 0xa7, 0xe4, 0xc7, 0xcd, 0xe5, 0x9e, 0xa8, 0x71, 0xec, 0xe9, 0x3e, 0x14, 0x28, 0xe6, 0xcb,
	0x9b, 0x09, 0xd2, 0x12, 0xf7, 0x9b, 0x9b, 0x5b, 0x53, 0xe7, 0x2e, 0xdd, 0x3a, 0xe6, 0x86, 0x59,
	0xc6, 0x6c, 0xfe, 0x5b, 0x80, 0xc5, 0x50, 0x5d, 0x87, 0x7c, 0x3a, 0x11, 0x9f, 0xdb, 0x13, 0x0a,
	0x3c, 0xc9, 0xe8, 0xad, 0x4b, 0xe7, 0x59, 0x08, 0x2f, 0x90, 0x10, 0x6e, 0x2a, 0x95, 0x28, 0x84,
	0xf0, 0x8e, 0x91, 0x63, 0xd5, 0x25, 0xd2, 0x9f, 0xa0, 0xbe, 0x9c, 0x2c, 0x91, 0xd4, 0x15, 0x23,
	0x47, 0xec, 0xb4, 0xaf, 0x0e, 0xe5, 0x1b, 0xc4, 0xdd, 0x8e, 0xb2, 0x35, 0xe9, 0x2e, 0xf2, 0x80,
	0xb3, 0x7e, 0x94, 0x81, 0xa5, 0x58, 0x1c, 0x87, 0x79, 0x07, 0x51, 0xde, 0x3b, 0x53, 0x24, 0x74,
	0x32, 0xf3, 0xe7, 0x9f, 0xb0, 0x82, 0x05, 0xf3, 0x12, 0x09, 0xe6, 0x96, 0xb2, 0x19, 0x05, 0x13,
	0x5f, 0x1a, 0x72, 0xd9, 0xbf, 0x0f, 0xe5, 0x18, 0xf7, 0x39, 0xca, 0xa7, 0xde, 0x1a, 0x72, 0x94,
	0x4f, 0xff, 0x84, 0x50, 0xaa, 0xc4, 0xed, 0x8b, 0xca, 0xad, 0x69, 0x6e, 0x39, 0x4f, 0x98, 0x87,
	0x3f, 0x09, 0x30, 0x47, 0xd4, 0x73, 0x48, 0x81, 0x09, 0xb9, 0x3e, 0xd6, 0xf9, 0x5c, 0xd1, 0x4d,
	0x5c, 0x18, 0x72, 0x45, 0x37, 0xf9, 0x61, 0x30, 0xa5, 0x59, 0xdd, 0xc7, 0x8b, 0xf6, 0x88, 0x59,
	0x9c, 0xef, 0x3d, 0x10, 0x91, 0x63, 0xc9, 0x95, 0xa4, 0x91, 0xf8, 0xce, 0x70, 0x73, 0x63, 0xca,
	0x0c, 0x33, 0x7e, 0x93, 0x18, 0x5f, 0x57, 0xe4, 0x94, 0x71, 0xe4, 0x58, 0x38, 0x9d, 0xbf, 0x91,
	0x1f, 0xd3, 0xb0, 0x1c, 0x0d, 0xf3, 0xb1, 0xd8, 0x6f, 0x82, 0x5c, 0x5b, 0x9a, 0xbc, 0x46, 0xe4,
	0xda, 0xd2, 0x14, 0xb9, 0xae, 0xec, 0x10, 0xa7, 0x9b, 0xca, 0x6a, 0xe4, 0xd4, 0x23, 0xab, 0xf6,
	0x88, 0x65, 0xd6, 0x16, 0x2c, 0xa2, 0x7f, 0xe5, 0x1b, 0x53, 0x65, 0xf1, 0x64, 0xf5, 0x4e, 0xd3,
	0xe5, 0x53, 0xda, 0x02, 0x73, 0x44, 0x8d, 0xbf, 0x26, 0x54, 0xf7, 0xa5, 0x3f, 0x3c, 0xde, 0x16,
	0xfe, 0xf2, 0x78, 0x5b, 0xf8, 0xfb, 0xe3, 0x6d, 0xe1, 0x97, 0x5f, 0x6d, 0x3f, 0xd7, 0xcf, 0x93,
	0xff, 0x49, 0xe9, 0xdb, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x01, 0x5f, 0x88, 0xe8, 0xdc, 0x24,
	0x00, 0x00,
}
