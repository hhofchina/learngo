// Code generated by protoc-gen-go.
// source: order.proto
// DO NOT EDIT!

/*
Package md is a generated protocol buffer package.

It is generated from these files:
	order.proto

It has these top-level messages:
	OrderReq
	OrderRsp
	Address
	StockReq
	StockRsp
	QueueReq
	QueueRsp
*/
package md

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// 订单请求
type OrderReq struct {
	Id        int32    `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	UserId    int32    `protobuf:"varint,102,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ProId     int32    `protobuf:"varint,103,opt,name=pro_id,json=proId" json:"pro_id,omitempty"`
	WdsId     int32    `protobuf:"varint,104,opt,name=wds_id,json=wdsId" json:"wds_id,omitempty"`
	RewId     int32    `protobuf:"varint,105,opt,name=rew_id,json=rewId" json:"rew_id,omitempty"`
	MdPlay    string   `protobuf:"bytes,109,opt,name=md_play,json=mdPlay" json:"md_play,omitempty"`
	AddressId int32    `protobuf:"varint,110,opt,name=address_id,json=addressId" json:"address_id,omitempty"`
	Address   *Address `protobuf:"bytes,111,opt,name=address" json:"address,omitempty"`
}

func (m *OrderReq) Reset()                    { *m = OrderReq{} }
func (m *OrderReq) String() string            { return proto.CompactTextString(m) }
func (*OrderReq) ProtoMessage()               {}
func (*OrderReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *OrderReq) GetAddress() *Address {
	if m != nil {
		return m.Address
	}
	return nil
}

// 订单响应
type OrderRsp struct {
	Orders []*OrderRsp_OrderResult `protobuf:"bytes,1,rep,name=orders" json:"orders,omitempty"`
}

func (m *OrderRsp) Reset()                    { *m = OrderRsp{} }
func (m *OrderRsp) String() string            { return proto.CompactTextString(m) }
func (*OrderRsp) ProtoMessage()               {}
func (*OrderRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *OrderRsp) GetOrders() []*OrderRsp_OrderResult {
	if m != nil {
		return m.Orders
	}
	return nil
}

type OrderRsp_OrderResult struct {
	Id       int32   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	UserId   int32   `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ProId    int32   `protobuf:"varint,3,opt,name=pro_id,json=proId" json:"pro_id,omitempty"`
	Status   int32   `protobuf:"varint,4,opt,name=status" json:"status,omitempty"`
	Amount   float32 `protobuf:"fixed32,5,opt,name=amount" json:"amount,omitempty"`
	IfPay    int32   `protobuf:"varint,6,opt,name=if_pay,json=ifPay" json:"if_pay,omitempty"`
	GameCode string  `protobuf:"bytes,20,opt,name=game_code,json=gameCode" json:"game_code,omitempty"`
}

func (m *OrderRsp_OrderResult) Reset()                    { *m = OrderRsp_OrderResult{} }
func (m *OrderRsp_OrderResult) String() string            { return proto.CompactTextString(m) }
func (*OrderRsp_OrderResult) ProtoMessage()               {}
func (*OrderRsp_OrderResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

// 收货地址
type Address struct {
	Id          int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Province    string `protobuf:"bytes,3,opt,name=province" json:"province,omitempty"`
	City        string `protobuf:"bytes,4,opt,name=city" json:"city,omitempty"`
	Detail      string `protobuf:"bytes,5,opt,name=detail" json:"detail,omitempty"`
	Mobile      string `protobuf:"bytes,6,opt,name=mobile" json:"mobile,omitempty"`
	Email       string `protobuf:"bytes,7,opt,name=email" json:"email,omitempty"`
	Description string `protobuf:"bytes,8,opt,name=description" json:"description,omitempty"`
}

func (m *Address) Reset()                    { *m = Address{} }
func (m *Address) String() string            { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()               {}
func (*Address) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// 库存请求
type StockReq struct {
	ProId  int32 `protobuf:"varint,1,opt,name=pro_id,json=proId" json:"pro_id,omitempty"`
	Lock   int32 `protobuf:"varint,4,opt,name=lock" json:"lock,omitempty"`
	Unlock int32 `protobuf:"varint,5,opt,name=unlock" json:"unlock,omitempty"`
}

func (m *StockReq) Reset()                    { *m = StockReq{} }
func (m *StockReq) String() string            { return proto.CompactTextString(m) }
func (*StockReq) ProtoMessage()               {}
func (*StockReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// 库存响应
type StockRsp struct {
	ProId  int32 `protobuf:"varint,1,opt,name=pro_id,json=proId" json:"pro_id,omitempty"`
	Stock  int32 `protobuf:"varint,2,opt,name=stock" json:"stock,omitempty"`
	Total  int32 `protobuf:"varint,101,opt,name=total" json:"total,omitempty"`
	Lock   int32 `protobuf:"varint,102,opt,name=lock" json:"lock,omitempty"`
	Unlock int32 `protobuf:"varint,103,opt,name=unlock" json:"unlock,omitempty"`
}

func (m *StockRsp) Reset()                    { *m = StockRsp{} }
func (m *StockRsp) String() string            { return proto.CompactTextString(m) }
func (*StockRsp) ProtoMessage()               {}
func (*StockRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

// 排队请求
type QueueReq struct {
	UserId int32   `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ProId  int32   `protobuf:"varint,2,opt,name=pro_id,json=proId" json:"pro_id,omitempty"`
	Qid    int32   `protobuf:"varint,101,opt,name=qid" json:"qid,omitempty"`
	Weight float32 `protobuf:"fixed32,102,opt,name=weight" json:"weight,omitempty"`
	Total  int32   `protobuf:"varint,103,opt,name=total" json:"total,omitempty"`
}

func (m *QueueReq) Reset()                    { *m = QueueReq{} }
func (m *QueueReq) String() string            { return proto.CompactTextString(m) }
func (*QueueReq) ProtoMessage()               {}
func (*QueueReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

// 排队响应
type QueueRsp struct {
	Qid    int32   `protobuf:"varint,1,opt,name=qid" json:"qid,omitempty"`
	UserId int32   `protobuf:"varint,2,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ProId  int32   `protobuf:"varint,3,opt,name=pro_id,json=proId" json:"pro_id,omitempty"`
	Weight float32 `protobuf:"fixed32,4,opt,name=weight" json:"weight,omitempty"`
}

func (m *QueueRsp) Reset()                    { *m = QueueRsp{} }
func (m *QueueRsp) String() string            { return proto.CompactTextString(m) }
func (*QueueRsp) ProtoMessage()               {}
func (*QueueRsp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func init() {
	proto.RegisterType((*OrderReq)(nil), "order.OrderReq")
	proto.RegisterType((*OrderRsp)(nil), "order.OrderRsp")
	proto.RegisterType((*OrderRsp_OrderResult)(nil), "order.OrderRsp.OrderResult")
	proto.RegisterType((*Address)(nil), "order.Address")
	proto.RegisterType((*StockReq)(nil), "order.StockReq")
	proto.RegisterType((*StockRsp)(nil), "order.StockRsp")
	proto.RegisterType((*QueueReq)(nil), "order.QueueReq")
	proto.RegisterType((*QueueRsp)(nil), "order.QueueRsp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for OrderService service

type OrderServiceClient interface {
	// 查订单
	GetOrder(ctx context.Context, in *OrderReq, opts ...grpc.CallOption) (*OrderRsp, error)
	// 双向多数据查订单
	ListOrder(ctx context.Context, opts ...grpc.CallOption) (OrderService_ListOrderClient, error)
	// 生成订单
	NewOrder(ctx context.Context, in *OrderReq, opts ...grpc.CallOption) (*OrderRsp, error)
	// 取消订单
	CancelOrder(ctx context.Context, in *OrderReq, opts ...grpc.CallOption) (*OrderRsp, error)
	// 查可用库存
	CheckStock(ctx context.Context, in *StockReq, opts ...grpc.CallOption) (*StockRsp, error)
	// 锁定库存
	LockStock(ctx context.Context, in *StockReq, opts ...grpc.CallOption) (*StockRsp, error)
	// 解锁恢复库存
	UnlockStock(ctx context.Context, in *StockReq, opts ...grpc.CallOption) (*StockRsp, error)
	// 抢购排队入队列
	QueuePush(ctx context.Context, in *QueueReq, opts ...grpc.CallOption) (*QueueRsp, error)
	// 抢购出队列
	QueuePop(ctx context.Context, in *QueueReq, opts ...grpc.CallOption) (*QueueRsp, error)
}

type orderServiceClient struct {
	cc *grpc.ClientConn
}

func NewOrderServiceClient(cc *grpc.ClientConn) OrderServiceClient {
	return &orderServiceClient{cc}
}

func (c *orderServiceClient) GetOrder(ctx context.Context, in *OrderReq, opts ...grpc.CallOption) (*OrderRsp, error) {
	out := new(OrderRsp)
	err := grpc.Invoke(ctx, "/order.OrderService/GetOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) ListOrder(ctx context.Context, opts ...grpc.CallOption) (OrderService_ListOrderClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_OrderService_serviceDesc.Streams[0], c.cc, "/order.OrderService/ListOrder", opts...)
	if err != nil {
		return nil, err
	}
	x := &orderServiceListOrderClient{stream}
	return x, nil
}

type OrderService_ListOrderClient interface {
	Send(*OrderReq) error
	Recv() (*OrderRsp, error)
	grpc.ClientStream
}

type orderServiceListOrderClient struct {
	grpc.ClientStream
}

func (x *orderServiceListOrderClient) Send(m *OrderReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *orderServiceListOrderClient) Recv() (*OrderRsp, error) {
	m := new(OrderRsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *orderServiceClient) NewOrder(ctx context.Context, in *OrderReq, opts ...grpc.CallOption) (*OrderRsp, error) {
	out := new(OrderRsp)
	err := grpc.Invoke(ctx, "/order.OrderService/NewOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) CancelOrder(ctx context.Context, in *OrderReq, opts ...grpc.CallOption) (*OrderRsp, error) {
	out := new(OrderRsp)
	err := grpc.Invoke(ctx, "/order.OrderService/CancelOrder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) CheckStock(ctx context.Context, in *StockReq, opts ...grpc.CallOption) (*StockRsp, error) {
	out := new(StockRsp)
	err := grpc.Invoke(ctx, "/order.OrderService/CheckStock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) LockStock(ctx context.Context, in *StockReq, opts ...grpc.CallOption) (*StockRsp, error) {
	out := new(StockRsp)
	err := grpc.Invoke(ctx, "/order.OrderService/LockStock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) UnlockStock(ctx context.Context, in *StockReq, opts ...grpc.CallOption) (*StockRsp, error) {
	out := new(StockRsp)
	err := grpc.Invoke(ctx, "/order.OrderService/UnlockStock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) QueuePush(ctx context.Context, in *QueueReq, opts ...grpc.CallOption) (*QueueRsp, error) {
	out := new(QueueRsp)
	err := grpc.Invoke(ctx, "/order.OrderService/QueuePush", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderServiceClient) QueuePop(ctx context.Context, in *QueueReq, opts ...grpc.CallOption) (*QueueRsp, error) {
	out := new(QueueRsp)
	err := grpc.Invoke(ctx, "/order.OrderService/QueuePop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OrderService service

type OrderServiceServer interface {
	// 查订单
	GetOrder(context.Context, *OrderReq) (*OrderRsp, error)
	// 双向多数据查订单
	ListOrder(OrderService_ListOrderServer) error
	// 生成订单
	NewOrder(context.Context, *OrderReq) (*OrderRsp, error)
	// 取消订单
	CancelOrder(context.Context, *OrderReq) (*OrderRsp, error)
	// 查可用库存
	CheckStock(context.Context, *StockReq) (*StockRsp, error)
	// 锁定库存
	LockStock(context.Context, *StockReq) (*StockRsp, error)
	// 解锁恢复库存
	UnlockStock(context.Context, *StockReq) (*StockRsp, error)
	// 抢购排队入队列
	QueuePush(context.Context, *QueueReq) (*QueueRsp, error)
	// 抢购出队列
	QueuePop(context.Context, *QueueReq) (*QueueRsp, error)
}

func RegisterOrderServiceServer(s *grpc.Server, srv OrderServiceServer) {
	s.RegisterService(&_OrderService_serviceDesc, srv)
}

func _OrderService_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/GetOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).GetOrder(ctx, req.(*OrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_ListOrder_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OrderServiceServer).ListOrder(&orderServiceListOrderServer{stream})
}

type OrderService_ListOrderServer interface {
	Send(*OrderRsp) error
	Recv() (*OrderReq, error)
	grpc.ServerStream
}

type orderServiceListOrderServer struct {
	grpc.ServerStream
}

func (x *orderServiceListOrderServer) Send(m *OrderRsp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *orderServiceListOrderServer) Recv() (*OrderReq, error) {
	m := new(OrderReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _OrderService_NewOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).NewOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/NewOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).NewOrder(ctx, req.(*OrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/CancelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CancelOrder(ctx, req.(*OrderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_CheckStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).CheckStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/CheckStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).CheckStock(ctx, req.(*StockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_LockStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).LockStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/LockStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).LockStock(ctx, req.(*StockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_UnlockStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).UnlockStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/UnlockStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).UnlockStock(ctx, req.(*StockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_QueuePush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).QueuePush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/QueuePush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).QueuePush(ctx, req.(*QueueReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrderService_QueuePop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServiceServer).QueuePop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/order.OrderService/QueuePop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServiceServer).QueuePop(ctx, req.(*QueueReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _OrderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "order.OrderService",
	HandlerType: (*OrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOrder",
			Handler:    _OrderService_GetOrder_Handler,
		},
		{
			MethodName: "NewOrder",
			Handler:    _OrderService_NewOrder_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _OrderService_CancelOrder_Handler,
		},
		{
			MethodName: "CheckStock",
			Handler:    _OrderService_CheckStock_Handler,
		},
		{
			MethodName: "LockStock",
			Handler:    _OrderService_LockStock_Handler,
		},
		{
			MethodName: "UnlockStock",
			Handler:    _OrderService_UnlockStock_Handler,
		},
		{
			MethodName: "QueuePush",
			Handler:    _OrderService_QueuePush_Handler,
		},
		{
			MethodName: "QueuePop",
			Handler:    _OrderService_QueuePop_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListOrder",
			Handler:       _OrderService_ListOrder_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
}

var fileDescriptor0 = []byte{
	// 658 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x95, 0x5d, 0x6e, 0xd3, 0x40,
	0x10, 0xc7, 0x71, 0xd2, 0x38, 0xce, 0xa4, 0x6a, 0x91, 0x55, 0xc0, 0x4a, 0x85, 0x54, 0x99, 0x97,
	0x3e, 0xa0, 0xd0, 0x8f, 0x13, 0xd0, 0x3e, 0xa0, 0x4a, 0x05, 0x82, 0x2b, 0x5e, 0x78, 0x89, 0x5c,
	0xef, 0x26, 0xb1, 0x6a, 0x67, 0x5d, 0xef, 0xba, 0x51, 0x39, 0x05, 0x57, 0xe1, 0x10, 0xbd, 0x04,
	0xd7, 0xe0, 0x02, 0xcc, 0xce, 0xae, 0x53, 0x07, 0x28, 0x4a, 0x79, 0x9b, 0xff, 0x6f, 0xe7, 0x6b,
	0x67, 0xc7, 0x32, 0xf4, 0x45, 0xc9, 0x78, 0x39, 0x2c, 0x4a, 0xa1, 0x84, 0xdf, 0x21, 0x11, 0xfe,
	0x70, 0xc0, 0xfb, 0xa8, 0xad, 0x88, 0x5f, 0xfb, 0x5b, 0xd0, 0x4a, 0x59, 0xe0, 0xec, 0x39, 0xfb,
	0x9d, 0x08, 0x2d, 0xff, 0x05, 0x74, 0x2b, 0xc9, 0xcb, 0x31, 0xc2, 0x09, 0x41, 0x57, 0xcb, 0x33,
	0xe6, 0x3f, 0x03, 0x17, 0xb3, 0x68, 0x3e, 0x25, 0xde, 0x41, 0x65, 0xf0, 0x82, 0x49, 0x8d, 0x67,
	0x06, 0xa3, 0x32, 0xb8, 0xe4, 0x0b, 0x8d, 0x53, 0x83, 0x51, 0x9d, 0x51, 0xf6, 0x9c, 0x8d, 0x8b,
	0x2c, 0xbe, 0x0d, 0x72, 0xe4, 0xbd, 0xc8, 0xcd, 0xd9, 0x08, 0x95, 0xff, 0x12, 0x20, 0x66, 0xac,
	0xe4, 0x92, 0x52, 0xcd, 0x29, 0xa6, 0x67, 0x09, 0xc6, 0xed, 0x43, 0xd7, 0x8a, 0x40, 0xe0, 0x59,
	0xff, 0x68, 0x6b, 0x68, 0x2e, 0xf6, 0xd6, 0xd0, 0xa8, 0x3e, 0x0e, 0x7f, 0x2e, 0x2f, 0x27, 0x0b,
	0xff, 0x18, 0x5c, 0x72, 0x93, 0x78, 0xc1, 0x36, 0x46, 0xed, 0xda, 0xa8, 0xda, 0xc1, 0x1a, 0x5c,
	0x56, 0x99, 0x8a, 0xac, 0xeb, 0xe0, 0xbb, 0x03, 0xfd, 0x06, 0xff, 0xd7, 0x84, 0x5a, 0x0f, 0x4c,
	0xa8, 0xdd, 0x9c, 0xd0, 0x73, 0x70, 0xa5, 0x8a, 0x55, 0x25, 0x83, 0x0d, 0xe3, 0x6e, 0x94, 0xe6,
	0x71, 0x2e, 0xaa, 0xb9, 0x0a, 0x3a, 0xc8, 0x5b, 0x91, 0x55, 0x3a, 0x4d, 0x3a, 0x19, 0x17, 0x38,
	0x22, 0xd7, 0xa4, 0x49, 0x27, 0x23, 0x9c, 0xd0, 0x2e, 0xf4, 0xa6, 0x71, 0xce, 0xc7, 0x89, 0x60,
	0x3c, 0xd8, 0xa1, 0xe1, 0x79, 0x1a, 0x9c, 0xa2, 0x0e, 0xef, 0x1c, 0xe8, 0xda, 0x51, 0xfc, 0xd1,
	0xaf, 0x0f, 0x1b, 0x73, 0xf4, 0xa3, 0x66, 0x7b, 0x11, 0xd9, 0xfe, 0x00, 0x3c, 0x6c, 0xee, 0x26,
	0x9d, 0x27, 0x9c, 0x9a, 0xc5, 0x5c, 0xb5, 0xd6, 0xfe, 0x49, 0xaa, 0x6e, 0xa9, 0x5b, 0xf4, 0xd7,
	0xb6, 0xee, 0x95, 0x71, 0x15, 0xa7, 0x19, 0xf5, 0x8a, 0xcf, 0x66, 0x94, 0xe6, 0xb9, 0xb8, 0x4c,
	0x33, 0x4e, 0xbd, 0xea, 0xe7, 0x24, 0xe5, 0xef, 0x40, 0x87, 0xe7, 0xda, 0xbd, 0x4b, 0xd8, 0x08,
	0x7f, 0x0f, 0xfa, 0x8c, 0xcb, 0xa4, 0x4c, 0x0b, 0x95, 0x8a, 0x79, 0xe0, 0xd1, 0x59, 0x13, 0x85,
	0xef, 0xc1, 0xbb, 0x50, 0x22, 0xb9, 0xd2, 0x9b, 0x79, 0x3f, 0x4e, 0xa7, 0x39, 0x4e, 0x6c, 0x2f,
	0x43, 0x0f, 0x3b, 0x4c, 0xb2, 0x75, 0x1b, 0xd5, 0x9c, 0x68, 0xc7, 0xbe, 0x08, 0xa9, 0xf0, 0xb6,
	0x4e, 0x87, 0xbb, 0xf0, 0x40, 0x3a, 0xec, 0x54, 0x6a, 0x17, 0xfb, 0x96, 0x46, 0x68, 0xaa, 0x84,
	0x8a, 0xb3, 0x80, 0x1b, 0x4a, 0x62, 0x59, 0x7a, 0xf2, 0xd7, 0xd2, 0xd3, 0x95, 0xd2, 0x5f, 0xc1,
	0xfb, 0x54, 0xf1, 0x8a, 0xeb, 0x9b, 0x34, 0x36, 0xc6, 0x79, 0x60, 0x63, 0x5a, 0xcd, 0x9e, 0x9e,
	0x42, 0xfb, 0x1a, 0x99, 0xa9, 0xad, 0x4d, 0x5d, 0x65, 0xc1, 0xd3, 0xe9, 0x4c, 0x51, 0x6d, 0xdc,
	0x15, 0xa3, 0xee, 0xfb, 0x9c, 0x36, 0xfa, 0x0c, 0x59, 0x5d, 0x1b, 0xaf, 0x6d, 0x73, 0x39, 0xf7,
	0xb9, 0xfe, 0x63, 0x7f, 0x6d, 0xed, 0x8d, 0x66, 0xed, 0xa3, 0xbb, 0x36, 0x6c, 0xd2, 0x77, 0x72,
	0xc1, 0xcb, 0x9b, 0x14, 0x17, 0xe7, 0x35, 0x78, 0xef, 0xb8, 0x22, 0xe4, 0x6f, 0xaf, 0x7c, 0x69,
	0xfc, 0x7a, 0xb0, 0xfd, 0xdb, 0xa7, 0xe7, 0x1f, 0x42, 0xef, 0x3c, 0x95, 0xeb, 0xba, 0xef, 0x3b,
	0x07, 0x8e, 0x2e, 0xf0, 0x81, 0x2f, 0xd6, 0x2d, 0xf0, 0x06, 0xfa, 0xa7, 0x31, 0x2e, 0x74, 0xb6,
	0x6e, 0xc0, 0x01, 0xc0, 0xe9, 0x8c, 0x27, 0x57, 0xb4, 0x32, 0x4b, 0xff, 0x7a, 0x1f, 0x07, 0xab,
	0x40, 0x16, 0xe1, 0x13, 0x2c, 0xd1, 0x3b, 0x17, 0x8f, 0x09, 0x38, 0x84, 0xfe, 0x67, 0xda, 0x8f,
	0x47, 0xd5, 0xa0, 0xc7, 0x1c, 0x55, 0x72, 0xb6, 0x0c, 0xa8, 0x57, 0x6b, 0xb0, 0x0a, 0x28, 0x60,
	0x68, 0x5f, 0x7f, 0x24, 0x8a, 0x75, 0xfc, 0x4f, 0x5e, 0xc1, 0x66, 0x22, 0xf2, 0x61, 0xce, 0xcc,
	0xd1, 0x09, 0xd0, 0x40, 0x46, 0xfa, 0x8f, 0x31, 0x72, 0xbe, 0xb4, 0x72, 0xf6, 0xcd, 0x71, 0x2e,
	0x5d, 0xfa, 0x83, 0x1c, 0xff, 0x0a, 0x00, 0x00, 0xff, 0xff, 0xe8, 0xb0, 0x43, 0xea, 0x50, 0x06,
	0x00, 0x00,
}
